networks:
  traefik-public:
    driver: bridge
    name: traefik-public
  portainer-network:
    driver: bridge
    name: portainer-network
  redis-network:
    driver: bridge
    name: redis-network
  kafka-network:
    driver: bridge

volumes:
  portainer_data:
  redis_data:
  kafka_data:
  zookeeper_data:

services:
  traefik:
    image: traefik:v3.4.1
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    networks:
      - traefik-public
    ports:
      - "80:80"
      - "443:443/tcp"
      - "443:443/udp"
    environment:
      - CF_API_EMAIL=${CF_API_EMAIL}
      - CLOUDFLARE_DNS_API_TOKEN=${CLOUDFLARE_DNS_API_TOKEN}
      - TRAEFIK_DASHBOARD_USERS=${TRAEFIK_DASHBOARD_USERS}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/etc/traefik
      - ./traefik/config.yaml:/etc/traefik/traefik.yaml:ro
      - ./traefik/logs:/var/log/traefik
    labels:
      - "traefik.enable=true"
      # This label is ONLY for the dashboard route (still needs scope on the router target)
      - "traefik.http.routers.traefik-dashboard.rule=Host(`${TRAEFIK_DASHBOARD_HOST}`)"
      - "traefik.http.routers.traefik-dashboard.entrypoints=websecure"
      - "traefik.http.routers.traefik-dashboard.service=api@internal"
      - "traefik.http.routers.traefik-dashboard.tls.certresolver=default"
      - "traefik.http.routers.traefik-dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=${TRAEFIK_DASHBOARD_USERS}"
      # (Optional) not strictly needed on Traefik itself:
      - "traefik.docker.network=traefik-public"

  frontend:
    build:
      context: ./frontend
      dockerfile: dockerfile
      args:
        - VITE_API_BASE_URL=${VITE_API_BASE_URL}
        - VITE_SENTRY_DSN_FRONTEND=${VITE_SENTRY_DSN_FRONTEND}
        - VITE_GOOGLE_CLIENT_ID=${VITE_GOOGLE_CLIENT_ID}
        - VITE_GOOGLE_REDIRECT_URI=${VITE_GOOGLE_REDIRECT_URI}
    volumes:
      - ./uploads:/srv/uploads
    networks:
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.scope=public"                     
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.frontend.rule=Host(`${FRONTEND_HOST}`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=default"
      - "traefik.http.routers.frontend.tls.domains[0].main=${APEX_DOMAIN}"
      - "traefik.http.routers.frontend.tls.domains[0].sans=*.${APEX_DOMAIN}"
      - "traefik.http.services.frontend-service.loadbalancer.server.port=80"

  backend:
    build:
      context: ./backend
      dockerfile: dockerfile
      args:
        - APP_PORT=${PORT:-4000}
    volumes:
      - ./uploads:/srv/uploads
    networks:
      - redis-network
      - traefik-public
      - kafka-network
    depends_on:
      - redis
    env_file:
      - .env
    labels:
      - "traefik.enable=true"
      - "traefik.scope=public"                      
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.backend.rule=Host(`${BACKEND_HOST}`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=default"
      - "traefik.http.services.backend-service.loadbalancer.server.port=${PORT:-4000}"

  portainer:
    image: portainer/portainer-ce:2.30.1-alpine
    restart: unless-stopped
    volumes:
      - portainer_data:/data
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - portainer-network
      - traefik-public
    labels:
      - "traefik.enable=true"
      - "traefik.scope=public"                      
      - "traefik.docker.network=traefik-public"
      - "traefik.http.routers.portainer.rule=Host(`${PORTAINER_HOST}`)"
      - "traefik.http.routers.portainer.entrypoints=websecure"
      - "traefik.http.routers.portainer.tls.certresolver=default"
      - "traefik.http.services.portainer.loadbalancer.server.port=9000"
    depends_on:
      - traefik

  redis:
    image: redis:8.0-alpine
    container_name: my-redis-container
    volumes:
      - redis_data:/data
      - ./redis-logs:/var/log/redis
    command: >
      redis-server
      --appendonly yes
      --requirepass ${REDIS_PASSWORD}
      --port 6379
    networks:
      - redis-network
    labels:
      - "traefik.enable=true"
      - "traefik.scope=public"                  
      - "traefik.tcp.routers.redis-tcp.entrypoints=websecure"
      - "traefik.tcp.services.redis.loadbalancer.server.port=6379"
    depends_on:
      - traefik

  zookeeper:
    image: confluentinc/cp-zookeeper:7.6.0
    networks:
      - kafka-network
    volumes:
      - zookeeper_data:/var/lib/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ALLOW_ANONYMOUS_LOGIN: "yes"

  kafka:
    image: confluentinc/cp-kafka:7.6.0
    depends_on:
      - zookeeper
    networks:
      - kafka-network
    volumes:
      - kafka_data:/var/lib/kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,PLAINTEXT_INTERNAL://0.0.0.0:29092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_NUM_PARTITIONS: "3"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: "1"

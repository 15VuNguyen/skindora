{
  "openapi": "3.0.3",
  "info": {
    "title": "Skindora API",
    "version": "1.0.0",
    "description": "API for the Skindora application, primarily handling user authentication and management.",
    "contact": {
      "name": "Skindora Team",
      "email": "skindora.site@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "https://api.skindora.site/api-docs",
      "description": "Server development"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "User authentication and management operations"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account and returns access and refresh tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Registration successful, tokens returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., email exists, password mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Log in an existing user",
        "description": "Authenticates a user and returns access and refresh tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful, tokens returned.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthSuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., incorrect email/password).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Request a password reset token",
        "description": "Sends a password reset token to the user's email.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Forgot password request acknowledged.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "404": {
            "description": "User with the provided email not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., email format incorrect).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify-forgot-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verify the forgot password token",
        "description": "Checks if the provided forgot password token is valid.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyForgotPasswordTokenReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token verification successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g., token is invalid, expired, or incorrect).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User associated with the token not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset the user's password",
        "description": "Sets a new password for the user using a valid forgot password token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g., forgot password token is invalid or incorrect).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found for the token.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., password format, passwords don't match).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/verify-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verify user's email address",
        "description": "Verifies the user's email using the provided email verification token and returns new tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verification status.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/AuthSuccessResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MessageResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (e.g., email verify token is incorrect, invalid or required).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/resend-verify-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Resend email verification token",
        "description": "Resends a new email verification token to the authenticated user's email address. Requires Bearer token authentication.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Resend email verification status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (e.g., user is banned).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/change-password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Change password",
        "description": "Allows an authenticated and verified user to change their password.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "User's old password and new password information.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Change password successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user has not verified their email address yet.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request body is invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logout a user",
        "description": "Logs out an authenticated user by invalidating their refresh token. Requires both a valid Access Token in the Authorization header and the Refresh Token in the body.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "The refresh token to be invalidated.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful. The refresh token has been invalidated.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. This can occur for several reasons: - The Access Token in the Authorization header is missing, invalid, or expired. - The Refresh Token provided in the body is invalid, expired, or does not exist in the database.\n",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request body is missing the required `refresh_token` field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user's profile",
        "description": "Retrieves the profile information of the currently authenticated user based on the provided Access Token. The returned user object will not contain sensitive fields like 'password' or 'tokens'.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMeSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The Access Token is missing, invalid, or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user's profile",
        "description": "Partially updates the profile information of the currently authenticated user. Only include the fields you want to change in the request body.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "description": "The fields to update in the user's profile. All fields are optional.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully. Returns the updated user object.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMeSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The Access Token is missing, invalid, or expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request body contains invalid data (e.g., username already exists, invalid format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/users/refresh-token": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Refresh user's access token",
        "description": "Provides a new access token and a new refresh token in exchange for a valid, unexpired refresh token. This endpoint does not require Bearer authentication via an access token.\n",
        "requestBody": {
          "description": "A valid refresh token.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. The provided refresh token is invalid, expired, or was not found in the database.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity. The request body is missing the required `refresh_token` field.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterReqBody": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "password",
          "confirm_password"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "Str0ngP@sswOrd"
          },
          "confirm_password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "Str0ngP@sswOrd"
          }
        }
      },
      "LoginReqBody": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "Str0ngP@sswOrd"
          }
        }
      },
      "LogoutReqBody": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "The refresh token issued to the user during login, which will be invalidated upon logout.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjZhMTIzNDU2Nzg5MGFiY2RlZjEyMzQ1IiwidG9rZW5fdHlwZSI6InJlZnJlc2hfdG9rZW4iLCJpYXQiOjE3MTg1MjAxMDAsImV4cCI6MTcxOTEyNDkwMH0.abcdefg123456"
          }
        },
        "required": [
          "refresh_token"
        ]
      },
      "ForgotPasswordReqBody": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          }
        }
      },
      "VerifyForgotPasswordTokenReqBody": {
        "type": "object",
        "required": [
          "forgot_password_token"
        ],
        "properties": {
          "forgot_password_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "ResetPasswordReqBody": {
        "type": "object",
        "description": "Requires forgot_password_token alongside new password details.",
        "required": [
          "forgot_password_token",
          "password",
          "confirm_password"
        ],
        "properties": {
          "forgot_password_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "NewStr0ngP@sswOrd"
          },
          "confirm_password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "NewStr0ngP@sswOrd"
          }
        }
      },
      "VerifyEmailReqBody": {
        "type": "object",
        "required": [
          "email_verify_token"
        ],
        "properties": {
          "email_verify_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "ChangePasswordReqBody": {
        "type": "object",
        "required": [
          "old_password",
          "password",
          "confirm_password"
        ],
        "properties": {
          "old_password": {
            "type": "string",
            "description": "The user's current password.",
            "example": "oldPassword123"
          },
          "password": {
            "type": "string",
            "description": "The user's new password (must be strong).",
            "example": "newStrongPassword123!"
          },
          "confirm_password": {
            "type": "string",
            "description": "Confirmation of the new password.",
            "example": "newStrongPassword123!"
          }
        }
      },
      "UpdateMeReqBody": {
        "type": "object",
        "description": "Fields to update for the user's profile. All fields are optional.",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The user's first name.",
            "example": "Van A"
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name.",
            "example": "Nguyen"
          },
          "location": {
            "type": "string",
            "description": "The user's location.",
            "example": "Ho Chi Minh, Vietnam"
          },
          "username": {
            "type": "string",
            "description": "A new unique username for the user. Must not be already taken by another user.",
            "example": "nguyenvana_2025"
          },
          "avatar": {
            "type": "string",
            "description": "A URL pointing to the user's new avatar image.",
            "format": "uri",
            "example": "https://example.com/avatars/new_avatar.png"
          }
        }
      },
      "RefreshTokenReqBody": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "The valid refresh token that was provided upon login.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjY2NTZkYmRjYj..."
          }
        },
        "required": [
          "refresh_token"
        ]
      },
      "AuthSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Login successful"
          },
          "result": {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5..."
              },
              "refresh_token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5..."
              }
            }
          }
        }
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Operation was successful."
          }
        }
      },
      "ErrorValidationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Validation error"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "example": "Email is required"
                }
              }
            }
          }
        }
      },
      "ErrorStatusResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User not found"
          }
        }
      },
      "ErrorServerResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Internal Server Error"
          },
          "errorInfor": {
            "type": "object",
            "nullable": true,
            "description": "Additional error information (excluding stack trace)."
          }
        }
      },
      "GetMeSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Get my profile successfully"
          },
          "result": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "RefreshTokenSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Refresh token successful"
          },
          "result": {
            "$ref": "#/components/schemas/AuthSuccessResponse"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "objectId",
            "description": "User's unique identifier",
            "example": "60d0fe4f5311236168a109ca"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-15T10:30:00Z"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-16T11:00:00Z"
          },
          "verify": {
            "type": "integer",
            "format": "int32",
            "description": "User verification status. 0: Unverified, 1: Verified, 2: Banned",
            "enum": [
              0,
              1,
              2
            ],
            "example": 0
          },
          "location": {
            "type": "string",
            "nullable": true,
            "example": "New York, USA"
          },
          "username": {
            "type": "string",
            "example": "johndoe123"
          },
          "phone_number": {
            "type": "string",
            "nullable": true,
            "example": "+11234567890"
          },
          "avatar": {
            "type": "string",
            "format": "url",
            "nullable": true,
            "example": "https://example.com/avatars/johndoe.jpg"
          },
          "roleid": {
            "type": "integer",
            "format": "int32",
            "description": "User role. 0: User, 1: Staff, 2: Admin",
            "enum": [
              0,
              1,
              2
            ],
            "example": 0
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT Bearer token **only**"
      }
    }
  },
  "security": [
    {
      "BearerAuth": []
    }
  ]
}

{
  "openapi": "3.0.3",
  "info": {
    "title": "Skindora API",
    "version": "1.0.0",
    "description": "API for the Skindora application, handling user authentication, management, and other core features.",
    "contact": {
      "name": "Skindora Team",
      "email": "skindora.site@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Development Server"
    },
    {
      "url": "https://skindora.site",
      "description": "Production Server"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Operations related to user authentication, profile, and management."
    },
    {
      "name": "Staffs",
      "description": "Operations available only to staff and admin roles."
    },
    {
      "name": "Reviews",
      "description": "Operations for creating and managing product reviews."
    },
    {
      "name": "Products",
      "description": "Operations for viewing and managing products."
    },
    {
      "name": "Payments",
      "description": "Operations related to payment gateways like ZaloPay and VNPay."
    },
    {
      "name": "Orders",
      "description": "Operations related to creating and managing customer orders."
    },
    {
      "name": "Carts",
      "description": "Operations for managing the user's shopping cart."
    },
    {
      "name": "Admin",
      "description": "Operations for managing the system."
    },
    {
      "name": "Admin - Filter Brand",
      "description": "Quản lý bộ lọc Thương hiệu (filter_brand)"
    },
    {
      "name": "Admin - Filter Dac Tinh",
      "description": "Quản lý bộ lọc Đặc tính (filter_dac_tinh)"
    },
    {
      "name": "Admin - Filter Ingredient",
      "description": "Quản lý bộ lọc Thành phần (filter_hsk_ingredient)"
    },
    {
      "name": "Admin - Filter Product Type",
      "description": "Quản lý bộ lọc Loại sản phẩm (filter_hsk_product_type)"
    },
    {
      "name": "Admin - Filter Size",
      "description": "Quản lý bộ lọc Kích thước (filter_hsk_size)"
    },
    {
      "name": "Admin - Filter Skin Type",
      "description": "Quản lý bộ lọc Loại da (filter_hsk_skin_type)"
    },
    {
      "name": "Admin - Filter Uses",
      "description": "Quản lý bộ lọc Công dụng (filter_hsk_uses)"
    },
    {
      "name": "Admin - Filter Origin",
      "description": "Quản lý bộ lọc Nguồn gốc (filter_origin)"
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account, sends a verification email, and returns access/refresh tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterReqBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Register successful"
                    },
                    "result": {
                      "type": "object",
                      "properties": {
                        "access_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5..."
                        },
                        "refresh_token": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., email exists, password mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Log in a user",
        "description": "Authenticates a user with email and password, returning access and refresh tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginSuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., incorrect email/password).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logout a user",
        "description": "Invalidates the provided refresh token, effectively logging the user out. Requires a valid access token for authentication.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token or refresh token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (missing refresh_token in body).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Request a password reset",
        "description": "Sends a forgot password token to the user's email if the email exists.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request acknowledged.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "404": {
            "description": "User with the provided email not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., invalid email format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/verify-forgot-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verify forgot password token",
        "description": "Checks if the provided forgot password token is valid.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyForgotPasswordTokenReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (token is invalid or incorrect).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset user password",
        "description": "Sets a new password for the user using a valid forgot password token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been reset successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (forgot password token is invalid).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., passwords don't match).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/verify-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verify user email",
        "description": "Verifies a user's email with the provided token. Returns new tokens upon successful first-time verification.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verification status. Can be a success message or a new set of tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/LoginSuccessResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MessageResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (email verify token is incorrect).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/resend-verify-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Resend email verification token",
        "description": "Resends a new email verification token to the authenticated user's email.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Resend email verification status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (user is banned or already verified).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/change-password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Change user password",
        "description": "Allows an authenticated and verified user to change their password by providing the old and new password.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token or old password does not match).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (user is not verified).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., new passwords don't match).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user's profile",
        "description": "Retrieves the profile information of the currently authenticated user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMeSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user's profile",
        "description": "Partially updates the profile information of the authenticated user. Only include the fields to be changed.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMeSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., username already exists).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/refresh-token": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Refresh access token",
        "description": "Issues a new access token and refresh token in exchange for a valid refresh token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (refresh token is invalid, used, or non-existent).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (missing refresh_token in body).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/oauth/google": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Google OAuth Callback",
        "description": "Callback endpoint for the Google OAuth 2.0 flow. This should not be called directly. The user is redirected here by Google after authentication. The service then redirects the user to the client application with tokens in the URL.\n",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The authorization code provided by Google.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to the client application with tokens in the query parameters.",
            "headers": {
              "Location": {
                "description": "The URL to redirect the user's browser to.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., Google account's email is not verified).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/addToWishList": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add products to wishlist",
        "description": "Adds one or more products to the authenticated user's wishlist.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToWishListReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products added to wishlist successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., empty product list).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/removeFromWishList": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Remove products from wishlist",
        "description": "Removes one or more products from the authenticated user's wishlist.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveFromWishListReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products removed from wishlist successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found in wishlist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/getWishList": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user's wishlist",
        "description": "Retrieves the list of product IDs in the authenticated user's wishlist.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Wishlist fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/vouchers": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all active vouchers",
        "description": "Retrieves a paginated list of all active vouchers available for users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "code",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of active vouchers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedVoucherResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/staffs/manage-products/get-all": {
      "get": {
        "tags": [
          "Staffs"
        ],
        "summary": "(Staff) Get all products with pagination",
        "description": "Allows authenticated staff members to retrieve a paginated list of all products in the system. This provides a comprehensive view of products for management purposes.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user is not a staff or admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/review/{orderId}/products/{productId}/review": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "summary": "Add a new review for a product",
        "description": "Allows an authenticated user to add a review (rating and comment) for a specific product they have purchased in a delivered order.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the delivered order.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the product within the order to be reviewed.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewReviewReqBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "description": "Forbidden. Order has not been delivered or has already been reviewed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order or Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      },
      "put": {
        "tags": [
          "Reviews"
        ],
        "summary": "Update an existing review",
        "description": "Allows an authenticated user to update their existing review for a product.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order containing the product review.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the product being reviewed.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Review, Order, or Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "Reviews"
        ],
        "summary": "Delete a review",
        "description": "Allows an authenticated user to delete their review for a product.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order containing the product review.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the product being reviewed.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Review not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/review/{productId}/review": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get reviews for a product",
        "description": "Retrieves a paginated list of all reviews for a specific product. This is a public endpoint.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          },
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "rating",
            "in": "query",
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2,
                3,
                4,
                5
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of reviews.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReviewResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/products/search": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "(Public) Search Products by Name",
        "description": "Tìm kiếm và trả về danh sách các sản phẩm đang hoạt động (state: ACTIVE) có phân trang dựa trên từ khóa trùng khớp với `name_on_list`.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa để tìm kiếm trong tên sản phẩm (không phân biệt chữ hoa/thường).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of matching products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., keyword is not a string).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/products/get-all": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "(Public) Get all products with pagination",
        "description": "Retrieves a paginated list of all products for public viewing. This endpoint returns a simplified version of the product object, suitable for list displays.\n",
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/payment/zalopay": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Create ZaloPay Payment Order",
        "description": "Allows an authenticated user to create a payment order with ZaloPay. The endpoint receives order details and returns a ZaloPay payment URL.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ZaloPayOrderReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "ZaloPay order created successfully, payment URL returned.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "return_code": {
                      "type": "integer",
                      "example": 1
                    },
                    "return_message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "order_url": {
                      "type": "string",
                      "format": "uri",
                      "example": "https://sbgateway.zalopay.vn/openinapp?order=..."
                    },
                    "zp_trans_token": {
                      "type": "string",
                      "example": "240624000000123_1a2b3c4d"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., missing orderDetails).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/vnpay": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Create VNPay Payment URL",
        "description": "Allows an authenticated user to create a VNPay payment URL. The endpoint receives payment details and returns a URL to redirect the user for payment.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VNPayOrderReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "VNPay payment URL created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Success"
                    },
                    "data": {
                      "type": "object",
                      "properties": {
                        "paymentUrl": {
                          "type": "string",
                          "format": "uri",
                          "example": "https://sandbox.vnpayment.vn/paymentv2/vpcpay.html?vnp_Amount=..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/payment/payments_return": {
      "post": {
        "tags": [
          "Payments"
        ],
        "summary": "Payment Return Callback",
        "description": "A callback endpoint for payment gateways to send return information. This endpoint is typically called by the payment gateway service, not by the client directly. Currently, it only logs the callback event.\n",
        "responses": {
          "200": {
            "description": "Callback received."
          }
        }
      }
    },
    "/orders": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "(Staff/Admin) Get All Orders",
        "description": "Retrieves a paginated list of all orders in the system. Available for staff and admin roles.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter orders by status.",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "CONFIRMED",
                "PROCESSING",
                "SHIPPING",
                "DELIVERED",
                "CANCELLED",
                "RETURNED",
                "FAILED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of orders.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrderResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/users/{userId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "(Staff/Admin) Get All Orders by User ID",
        "description": "Retrieves a paginated list of all orders for a specific user. Available for staff and admin roles.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "status",
            "in": "query",
            "description": "Filter orders by status.",
            "schema": {
              "type": "string",
              "enum": [
                "PENDING",
                "CONFIRMED",
                "PROCESSING",
                "SHIPPING",
                "DELIVERED",
                "CANCELLED",
                "RETURNED",
                "FAILED"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of orders for the specified user.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedOrderResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/current": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Current Prepared Order",
        "description": "Retrieves the temporary order that is being prepared for checkout from the user's session.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved the prepared order.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreparedOrderResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "No prepared order found or it has expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/me": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get My Orders",
        "description": "Retrieves a list of all past orders for the authenticated user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of the user's orders.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get all your orders successfully"
                    },
                    "result": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/OrderWithDetailsResponse"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/{orderId}": {
      "get": {
        "tags": [
          "Orders"
        ],
        "summary": "Get Order by ID",
        "description": "Retrieves details of a specific order. Accessible by the order owner, staff, or admin.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order to retrieve.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderWithDetailsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/{orderId}/next-status": {
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "(Staff/Admin) Move Order to Next Status",
        "description": "Updates the status of an order to the next stage in the lifecycle (e.g., PENDING to CONFIRMED).",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order to update.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order status updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdateOrderStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., cannot transition from the current status).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/{orderId}/cancel-request": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Request to Cancel an Order",
        "description": "Allows an authenticated user to submit a request to cancel their order.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order to request cancellation for.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelOrderReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cancellation request submitted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderWithDetailsResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "description": "Forbidden (Order status is not PENDING or CONFIRMED).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/{orderId}/cancel-request/approve": {
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "(Staff/Admin) Approve Order Cancellation",
        "description": "Allows a staff or admin to approve a user's request to cancel an order.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order whose cancellation request is to be approved.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveRejectCancelReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cancellation request approved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderWithDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., no cancellation was requested).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/{orderId}/cancel-request/reject": {
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "(Staff/Admin) Reject Order Cancellation",
        "description": "Allows a staff or admin to reject a user's request to cancel an order.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order whose cancellation request is to be rejected.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApproveRejectCancelReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cancellation request rejected successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderWithDetailsResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., no cancellation was requested).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Order not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/cart": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Prepare Order from Cart",
        "description": "Prepares a temporary order based on selected items from the user's cart. This temporary order is stored for 30 minutes and must be checked out within that time.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PrepareOrderReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order prepared successfully for checkout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreparedOrderResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Cart is empty or selected products are not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/buy-now": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Prepare Order for Buy Now",
        "description": "Prepares a temporary order for a single product using the \"Buy Now\" feature. This temporary order is stored for 30 minutes.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BuyNowReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Order prepared successfully for checkout.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PreparedOrderResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/orders/checkout": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Checkout Order",
        "description": "Finalizes and creates a permanent order from a prepared temporary order. Requires shipping details and payment information.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckoutReqBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OrderCreationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Prepared order is not found or has expired.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error for shipping details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/carts": {
      "get": {
        "tags": [
          "Carts"
        ],
        "summary": "Get the current user's cart",
        "description": "Retrieves all items currently in the authenticated user's shopping cart.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cart content retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      },
      "post": {
        "tags": [
          "Carts"
        ],
        "summary": "Add a product to the cart",
        "description": "Adds a specified quantity of a product to the user's cart. If the product is already in the cart, the quantity is updated.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToCartReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product added to cart successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., product out of stock, invalid quantity).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Clear the entire cart",
        "description": "Removes all items from the authenticated user's shopping cart.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Cart cleared successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Cart is already empty or does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/carts/{productId}": {
      "patch": {
        "tags": [
          "Carts"
        ],
        "summary": "Update product quantity in cart",
        "description": "Updates the quantity of a specific product in the cart. Setting quantity to 0 removes the item.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the product to update in the cart.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateCartReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cart updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., quantity exceeds stock).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Product not found in the database or in the cart.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "Carts"
        ],
        "summary": "Remove a product from the cart",
        "description": "Removes a single specific product from the authenticated user's cart, regardless of quantity.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the product to remove from the cart.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product removed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CartResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Product not found in the cart.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/admin/manage-users/get-all": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get All Users",
        "description": "Retrieves a paginated list of all users. Requires admin privileges.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-users/unverified": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get Paginated Unverified Users",
        "description": "Lấy danh sách những người dùng chưa xác thực tài khoản có phân trang.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of unverified users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-users/verified": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get Paginated Verified Users",
        "description": "Lấy danh sách những người dùng đã xác thực tài khoản có phân trang.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of verified users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-users/banned": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get Paginated Banned Users",
        "description": "Lấy danh sách những người dùng đã bị cấm có phân trang.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of banned users.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedUserResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-users/{_id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get User Detail",
        "description": "Retrieves detailed information for a specific user by their ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to retrieve.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMeSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-vouchers/get-all": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get All Vouchers",
        "description": "Retrieves a paginated list of all vouchers, including inactive ones.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "code",
            "in": "query",
            "description": "Filter vouchers by code.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of all vouchers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedVoucherResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-vouchers": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Create a New Voucher",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateVoucherReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Voucher created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherCreationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-vouchers/{voucherId}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Update a Voucher",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "required": true,
            "description": "The ID of the voucher to update.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateVoucherReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Voucher updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherCreationResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-vouchers/{voucherId}/status": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Toggle Voucher Active Status",
        "description": "Activates or deactivates a voucher.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "voucherId",
            "in": "path",
            "required": true,
            "description": "The ID of the voucher to activate/deactivate.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Voucher status toggled successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VoucherCreationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Cannot reactivate an expired voucher.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-products/get-all": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get All Products",
        "description": "Retrieves a paginated list of all products with full details.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-products/create-new-product": {
      "post": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Create a New Product",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateProductReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-products/{_id}": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get Product Detail",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "The ID of the product.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Product details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      },
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Update a Product",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "The ID of the product to update.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-products/search-by-name": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Search Products by Name Only",
        "description": "Tìm kiếm và trả về danh sách các sản phẩm có phân trang chỉ dựa trên từ khóa trùng khớp với `name_on_list`. API này không nhận các tham số filter khác.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa để tìm kiếm trong tên sản phẩm (name_on_list).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of matching products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/create-new-filter-brand": {
      "post": {
        "tags": [
          "Admin - Filter Brand"
        ],
        "summary": "(Admin) Create a New Filter Brand",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilterBrandReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter brand created successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-users/update-user-states/{id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Update a User's Verification Status",
        "description": "Allows an admin to update the verification status of a user (e.g., verify, ban, or unverify). An admin cannot update their own status.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "The ID of the user to update.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserStateReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User state updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Update user state successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., trying to update own status).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "User to be updated not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-products/update-state/{_id}": {
      "put": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Update Product State",
        "description": "Allows an admin to change the state of a product (e.g., set it to ACTIVE, INACTIVE, OUT_OF_STOCK, etc.).",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "The ID of the product to update.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProductStateReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Product state updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Update product state successfully"
                    },
                    "data": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. User is not an admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          }
        }
      }
    },
    "/admin/manage-products/stats": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get Product Statistics",
        "description": "Lấy 4 số liệu thống kê chính về sản phẩm cho dashboard.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về các số liệu thống kê thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get product statistics successfully"
                    },
                    "result": {
                      "$ref": "#/components/schemas/ProductStatsResponse"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-products/on-sale": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get Paginated On-Sale Products",
        "description": "Lấy danh sách các sản phẩm đang bán (trạng thái ACTIVE) có phân trang.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of on-sale products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-products/low-stock": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get Paginated Low-Stock Products",
        "description": "Lấy danh sách các sản phẩm sắp hết hàng (số lượng > 0 và <= 10) có phân trang.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of low-stock products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-products/out-of-stock": {
      "get": {
        "tags": [
          "Admin"
        ],
        "summary": "(Admin) Get Paginated Out-of-Stock Products",
        "description": "Lấy danh sách các sản phẩm đã hết hàng (số lượng = 0) có phân trang.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of out-of-stock products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-all-filter-brands": {
      "get": {
        "tags": [
          "Admin - Filter Brand"
        ],
        "summary": "(Admin) Get All Filter Brands",
        "description": "Retrieves a paginated list of all filterable brands.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of filter brands.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterBrandResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-filter-brand-detail/{_id}": {
      "get": {
        "tags": [
          "Admin - Filter Brand"
        ],
        "summary": "(Admin) Get Filter Brand by ID",
        "description": "Retrieves the details of a specific filter brand by its ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "The ID of the filter brand to retrieve.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Filter brand details retrieved successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterBrand"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-brand/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Brand"
        ],
        "summary": "(Admin) Update a Filter Brand",
        "description": "Updates the details of an existing filter brand.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "The ID of the filter brand to update.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFilterBrandReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter brand updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterBrand"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (VD:Cố gắng cập nhật một filter đang ở trạng thái không hoạt động).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse",
                  "example": {
                    "message": "Cannot update an inactive filter. Please activate it first."
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-brand-state/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Brand"
        ],
        "summary": "(Admin) Update Filter Brand State",
        "description": "Updates the state of a filter brand (e.g., from ACTIVE to INACTIVE).",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "The ID of the filter brand to update the state for.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableFilterBrandReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter brand state updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterBrand"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/search-filter-brand": {
      "get": {
        "tags": [
          "Admin - Filter Brand"
        ],
        "summary": "(Admin) Search Filter Brands by Name",
        "description": "Tìm kiếm và trả về danh sách các filter thương hiệu theo `option_name`.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa để tìm kiếm trong tên thương hiệu (không phân biệt chữ hoa/thường).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter thương hiệu phù hợp.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterBrandResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/create-new-filter-dac-tinh": {
      "post": {
        "tags": [
          "Admin - Filter Dac Tinh"
        ],
        "summary": "(Admin) Create a New Filter Dac Tinh",
        "description": "Tạo một filter đặc tính mới (ví dụ:Chống lão hóa, làm trắng da).",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilterDacTinhReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter đặc tính được tạo thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-all-filter-dac-tinhs": {
      "get": {
        "tags": [
          "Admin - Filter Dac Tinh"
        ],
        "summary": "(Admin) Get All Filter Dac Tinhs",
        "description": "Lấy danh sách tất cả các filter đặc tính có phân trang.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter đặc tính.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterDacTinhResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-filter-dac-tinh-detail/{_id}": {
      "get": {
        "tags": [
          "Admin - Filter Dac Tinh"
        ],
        "summary": "(Admin) Get Filter Dac Tinh by ID",
        "description": "Lấy thông tin chi tiết của một filter đặc tính bằng ID.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "ID của filter đặc tính cần lấy thông tin.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Thông tin chi tiết filter đặc tính.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterDacTinh"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-dac-tinh/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Dac Tinh"
        ],
        "summary": "(Admin) Update a Filter Dac Tinh",
        "description": "Cập nhật thông tin của một filter đặc tính đã tồn tại.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "ID của filter đặc tính cần cập nhật.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFilterDacTinhReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter đặc tính được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterDacTinh"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "400'": {
            "description": "Bad Request (VD:Cố gắng cập nhật một filter đang ở trạng thái không hoạt động).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse",
                  "example": {
                    "message": "Cannot update an inactive filter. Please activate it first."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-dac-tinh-state/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Dac Tinh"
        ],
        "summary": "(Admin) Update Filter Dac Tinh State",
        "description": "Cập nhật trạng thái (ACTIVE/INACTIVE) của một filter đặc tính.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "ID của filter đặc tính cần cập nhật trạng thái.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableFilterDacTinhReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trạng thái filter đặc tính được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterDacTinh"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/search-filter-dac-tinh": {
      "get": {
        "tags": [
          "Admin - Filter Dac Tinh"
        ],
        "summary": "(Admin) Search Filter Dac Tinhs by Name",
        "description": "Tìm kiếm và trả về danh sách các filter đặc tính theo `option_name`.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa để tìm kiếm trong tên đặc tính (không phân biệt chữ hoa/thường).",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter đặc tính phù hợp.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterDacTinhResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/create-new-filter-hsk-ingredient": {
      "post": {
        "tags": [
          "Admin - Filter Ingredient"
        ],
        "summary": "(Admin) Create a New HSK Ingredient Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilterHskIngredientReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter thành phần được tạo thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-all-filter-hsk-ingredients": {
      "get": {
        "tags": [
          "Admin - Filter Ingredient"
        ],
        "summary": "(Admin) Get All HSK Ingredient Filters",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter thành phần.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskIngredientResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-filter-hsk-ingredient-detail/{_id}": {
      "get": {
        "tags": [
          "Admin - Filter Ingredient"
        ],
        "summary": "(Admin) Get HSK Ingredient Filter by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "ID của filter thành phần cần lấy.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chi tiết filter thành phần.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskIngredient"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-ingredient/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Ingredient"
        ],
        "summary": "(Admin) Update an HSK Ingredient Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "ID của filter thành phần cần cập nhật.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFilterHskIngredientReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter thành phần được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskIngredient"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "400'": {
            "description": "Bad Request (VD:Cố gắng cập nhật một filter đang ở trạng thái không hoạt động).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse",
                  "example": {
                    "message": "Cannot update an inactive filter. Please activate it first."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-ingredient-state/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Ingredient"
        ],
        "summary": "(Admin) Update HSK Ingredient Filter State",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "description": "ID của filter thành phần cần cập nhật trạng thái.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableFilterHskIngredientReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trạng thái filter thành phần được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskIngredient"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/search-filter-hsk-ingredient": {
      "get": {
        "tags": [
          "Admin - Filter Ingredient"
        ],
        "summary": "(Admin) Search HSK Ingredient Filters by Name",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa tìm kiếm trong tên thành phần.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter thành phần phù hợp.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskIngredientResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/create-new-filter-hsk-product-type": {
      "post": {
        "tags": [
          "Admin - Filter Product Type"
        ],
        "summary": "(Admin) Create a New HSK Product Type Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilterHskProductTypeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter loại sản phẩm được tạo thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-all-filter-hsk-product-types": {
      "get": {
        "tags": [
          "Admin - Filter Product Type"
        ],
        "summary": "(Admin) Get All HSK Product Type Filters",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter loại sản phẩm.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskProductTypeResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-filter-hsk-product-type-detail/{_id}": {
      "get": {
        "tags": [
          "Admin - Filter Product Type"
        ],
        "summary": "(Admin) Get HSK Product Type Filter by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chi tiết filter loại sản phẩm.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskProductType"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-product-type/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Product Type"
        ],
        "summary": "(Admin) Update an HSK Product Type Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFilterHskProductTypeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter loại sản phẩm được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskProductType"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "400'": {
            "description": "Bad Request (VD:Cố gắng cập nhật một filter đang ở trạng thái không hoạt động).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse",
                  "example": {
                    "message": "Cannot update an inactive filter. Please activate it first."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-product-type-state/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Product Type"
        ],
        "summary": "(Admin) Update HSK Product Type Filter State",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableFilterHskProductTypeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trạng thái filter loại sản phẩm được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskProductType"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/search-filter-hsk-product-type": {
      "get": {
        "tags": [
          "Admin - Filter Product Type"
        ],
        "summary": "(Admin) Search HSK Product Type Filters by Name",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa tìm kiếm trong tên loại sản phẩm.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter loại sản phẩm phù hợp.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskProductTypeResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/create-new-filter-hsk-size": {
      "post": {
        "tags": [
          "Admin - Filter Size"
        ],
        "summary": "(Admin) Create a New HSK Size Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilterHskSizeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter kích thước được tạo thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-all-filter-hsk-sizes": {
      "get": {
        "tags": [
          "Admin - Filter Size"
        ],
        "summary": "(Admin) Get All HSK Size Filters",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter kích thước.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskSizeResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-filter-hsk-size-detail/{_id}": {
      "get": {
        "tags": [
          "Admin - Filter Size"
        ],
        "summary": "(Admin) Get HSK Size Filter by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chi tiết filter kích thước.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskSize"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-size/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Size"
        ],
        "summary": "(Admin) Update an HSK Size Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFilterHskSizeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter kích thước được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskSize"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "400'": {
            "description": "Bad Request (VD:Cố gắng cập nhật một filter đang ở trạng thái không hoạt động).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse",
                  "example": {
                    "message": "Cannot update an inactive filter. Please activate it first."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-size-state/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Size"
        ],
        "summary": "(Admin) Update HSK Size Filter State",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableFilterHskSizeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trạng thái filter kích thước được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskSize"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/search-filter-hsk-size": {
      "get": {
        "tags": [
          "Admin - Filter Size"
        ],
        "summary": "(Admin) Search HSK Size Filters by Name",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa tìm kiếm trong tên kích thước.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter kích thước phù hợp.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskSizeResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/create-new-filter-hsk-skin-type": {
      "post": {
        "tags": [
          "Admin - Filter Skin Type"
        ],
        "summary": "(Admin) Create a New HSK Skin Type Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilterHskSkinTypeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter loại da được tạo thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-all-filter-hsk-skin-types": {
      "get": {
        "tags": [
          "Admin - Filter Skin Type"
        ],
        "summary": "(Admin) Get All HSK Skin Type Filters",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter loại da.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskSkinTypeResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-filter-hsk-skin-type-detail/{_id}": {
      "get": {
        "tags": [
          "Admin - Filter Skin Type"
        ],
        "summary": "(Admin) Get HSK Skin Type Filter by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chi tiết filter loại da.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskSkinType"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-skin-type/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Skin Type"
        ],
        "summary": "(Admin) Update an HSK Skin Type Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFilterHskSkinTypeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter loại da được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskSkinType"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "400'": {
            "description": "Bad Request (VD:Cố gắng cập nhật một filter đang ở trạng thái không hoạt động).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse",
                  "example": {
                    "message": "Cannot update an inactive filter. Please activate it first."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-skin-type-state/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Skin Type"
        ],
        "summary": "(Admin) Update HSK Skin Type Filter State",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableFilterHskSkinTypeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trạng thái filter loại da được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskSkinType"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/search-filter-hsk-skin-type": {
      "get": {
        "tags": [
          "Admin - Filter Skin Type"
        ],
        "summary": "(Admin) Search HSK Skin Type Filters by Name",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa tìm kiếm trong tên loại da.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter loại da phù hợp.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskSkinTypeResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/create-new-filter-hsk-uses": {
      "post": {
        "tags": [
          "Admin - Filter Uses"
        ],
        "summary": "(Admin) Create a New HSK Uses Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilterHskUsesReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter công dụng được tạo thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-all-filter-hsk-uses": {
      "get": {
        "tags": [
          "Admin - Filter Uses"
        ],
        "summary": "(Admin) Get All HSK Uses Filters",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter công dụng.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskUsesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-filter-hsk-uses-detail/{_id}": {
      "get": {
        "tags": [
          "Admin - Filter Uses"
        ],
        "summary": "(Admin) Get HSK Uses Filter by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chi tiết filter công dụng.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskUses"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-uses/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Uses"
        ],
        "summary": "(Admin) Update an HSK Uses Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFilterHskUsesReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter công dụng được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskUses"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "400'": {
            "description": "Bad Request (VD:Cố gắng cập nhật một filter đang ở trạng thái không hoạt động).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse",
                  "example": {
                    "message": "Cannot update an inactive filter. Please activate it first."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-uses-state/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Uses"
        ],
        "summary": "(Admin) Update HSK Uses Filter State",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableFilterHskUsesReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trạng thái filter công dụng được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskUses"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/search-filter-hsk-uses": {
      "get": {
        "tags": [
          "Admin - Filter Uses"
        ],
        "summary": "(Admin) Search HSK Uses Filters by Name",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa tìm kiếm trong tên công dụng.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter công dụng phù hợp.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskUsesResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/create-new-filter-hsk-origin": {
      "post": {
        "tags": [
          "Admin - Filter Origin"
        ],
        "summary": "(Admin) Create a New HSK Origin Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFilterHskOriginReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter nguồn gốc được tạo thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-all-filter-hsk-origins": {
      "get": {
        "tags": [
          "Admin - Filter Origin"
        ],
        "summary": "(Admin) Get All HSK Origin Filters",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter nguồn gốc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskOriginResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-filter-hsk-origin-detail/{_id}": {
      "get": {
        "tags": [
          "Admin - Filter Origin"
        ],
        "summary": "(Admin) Get HSK Origin Filter by ID",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Chi tiết filter nguồn gốc.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskOrigin"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-origin/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Origin"
        ],
        "summary": "(Admin) Update an HSK Origin Filter",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateFilterHskOriginReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Filter nguồn gốc được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskOrigin"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "400'": {
            "description": "Bad Request (VD:Cố gắng cập nhật một filter đang ở trạng thái không hoạt động).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse",
                  "example": {
                    "message": "Cannot update an inactive filter. Please activate it first."
                  }
                }
              }
            }
          }
        }
      }
    },
    "/admin/manage-filters/update-filter-hsk-origin-state/{_id}": {
      "put": {
        "tags": [
          "Admin - Filter Origin"
        ],
        "summary": "(Admin) Update HSK Origin Filter State",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DisableFilterHskOriginReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trạng thái filter nguồn gốc được cập nhật thành công.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FilterHskOrigin"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          }
        }
      }
    },
    "/admin/manage-filters/search-filter-hsk-origin": {
      "get": {
        "tags": [
          "Admin - Filter Origin"
        ],
        "summary": "(Admin) Search HSK Origin Filters by Name",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/PageQuery"
          },
          {
            "$ref": "#/components/parameters/LimitQuery"
          },
          {
            "name": "keyword",
            "in": "query",
            "description": "Từ khóa tìm kiếm trong tên nguồn gốc.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về danh sách các filter nguồn gốc phù hợp.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedFilterHskOriginResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-active-filter-brands": {
      "get": {
        "tags": [
          "Admin - Filter Brand"
        ],
        "summary": "(Admin) Get All Active Filter Brands",
        "description": "Lấy danh sách tất cả các filter thương hiệu đang hoạt động để sử dụng trong việc tạo/cập nhật sản phẩm.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về một mảng các đối tượng filter thương hiệu.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get active filter brands successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterBrand"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-active-filter-dac-tinhs": {
      "get": {
        "tags": [
          "Admin - Filter Dac Tinh"
        ],
        "summary": "(Admin) Get All Active Filter Dac Tinhs",
        "description": "Lấy danh sách tất cả các filter đặc tính đang hoạt động.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về một mảng các đối tượng filter đặc tính.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get active filter dac tinhs successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterDacTinh"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-active-filter-hsk-ingredients": {
      "get": {
        "tags": [
          "Admin - Filter Ingredient"
        ],
        "summary": "(Admin) Get All Active HSK Ingredient Filters",
        "description": "Lấy danh sách tất cả các filter thành phần đang hoạt động.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về một mảng các đối tượng filter thành phần.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get active filter ingredients successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterHskIngredient"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-active-filter-hsk-product-types": {
      "get": {
        "tags": [
          "Admin - Filter Product Type"
        ],
        "summary": "(Admin) Get All Active HSK Product Type Filters",
        "description": "Lấy danh sách tất cả các filter loại sản phẩm đang hoạt động.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về một mảng các đối tượng filter loại sản phẩm.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get active filter product types successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterHskProductType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-active-filter-hsk-sizes": {
      "get": {
        "tags": [
          "Admin - Filter Size"
        ],
        "summary": "(Admin) Get All Active HSK Size Filters",
        "description": "Lấy danh sách tất cả các filter kích thước đang hoạt động.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về một mảng các đối tượng filter kích thước.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get active filter sizes successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterHskSize"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-active-filter-hsk-skin-types": {
      "get": {
        "tags": [
          "Admin - Filter Skin Type"
        ],
        "summary": "(Admin) Get All Active HSK Skin Type Filters",
        "description": "Lấy danh sách tất cả các filter loại da đang hoạt động.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về một mảng các đối tượng filter loại da.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get active filter skin types successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterHskSkinType"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-active-filter-hsk-uses": {
      "get": {
        "tags": [
          "Admin - Filter Uses"
        ],
        "summary": "(Admin) Get All Active HSK Uses Filters",
        "description": "Lấy danh sách tất cả các filter công dụng đang hoạt động.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về một mảng các đối tượng filter công dụng.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get active filter uses successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterHskUses"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    },
    "/admin/manage-filters/get-active-filter-hsk-origins": {
      "get": {
        "tags": [
          "Admin - Filter Origin"
        ],
        "summary": "(Admin) Get All Active HSK Origin Filters",
        "description": "Lấy danh sách tất cả các filter nguồn gốc đang hoạt động.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Trả về một mảng các đối tượng filter nguồn gốc.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Get active filter origins successfully"
                    },
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/FilterHskOrigin"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterReqBody": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "password",
          "confirm_password"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "example": "password123",
            "minLength": 8,
            "maxLength": 30
          },
          "confirm_password": {
            "type": "string",
            "format": "password",
            "example": "password123",
            "minLength": 8,
            "maxLength": 30
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "description": "Optional avatar URL.",
            "example": "https://example.com/avatar.jpg"
          }
        }
      },
      "LoginReqBody": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "Str0ngP@sswOrd"
          }
        }
      },
      "LogoutReqBody": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "The refresh token issued to the user during login, which will be invalidated upon logout.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjZhMTIzNDU2Nzg5MGFiY2RlZjEyMzQ1IiwidG9rZW5fdHlwZSI6InJlZnJlc2hfdG9rZW4iLCJpYXQiOjE3MTg1MjAxMDAsImV4cCI6MTcxOTEyNDkwMH0.abcdefg123456"
          }
        },
        "required": [
          "refresh_token"
        ]
      },
      "ForgotPasswordReqBody": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          }
        }
      },
      "VerifyForgotPasswordTokenReqBody": {
        "type": "object",
        "required": [
          "forgot_password_token"
        ],
        "properties": {
          "forgot_password_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "ResetPasswordReqBody": {
        "type": "object",
        "description": "Requires forgot_password_token alongside new password details.",
        "required": [
          "forgot_password_token",
          "password",
          "confirm_password"
        ],
        "properties": {
          "forgot_password_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "NewStr0ngP@sswOrd"
          },
          "confirm_password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "NewStr0ngP@sswOrd"
          }
        }
      },
      "VerifyEmailReqBody": {
        "type": "object",
        "required": [
          "email_verify_token"
        ],
        "properties": {
          "email_verify_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "ChangePasswordReqBody": {
        "type": "object",
        "required": [
          "old_password",
          "password",
          "confirm_password"
        ],
        "properties": {
          "old_password": {
            "type": "string",
            "description": "The user's current password.",
            "example": "oldPassword123"
          },
          "password": {
            "type": "string",
            "description": "The user's new password (must be strong).",
            "example": "newStrongPassword123!"
          },
          "confirm_password": {
            "type": "string",
            "description": "Confirmation of the new password.",
            "example": "newStrongPassword123!"
          }
        }
      },
      "UpdateMeReqBody": {
        "type": "object",
        "description": "Fields to update for the user's profile. All fields are optional.",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The user's first name.",
            "example": "Van A"
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name.",
            "example": "Nguyen"
          },
          "location": {
            "type": "string",
            "description": "The user's location.",
            "example": "Ho Chi Minh, Vietnam"
          },
          "username": {
            "type": "string",
            "description": "A new unique username for the user. Must not be already taken by another user.",
            "example": "nguyenvana_2025"
          },
          "avatar": {
            "type": "string",
            "description": "A URL pointing to the user's new avatar image.",
            "format": "uri",
            "example": "https://example.com/avatars/new_avatar.png"
          }
        }
      },
      "RefreshTokenReqBody": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "The valid refresh token that was provided upon login.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjY2NTZkYmRjYj..."
          }
        },
        "required": [
          "refresh_token"
        ]
      },
      "AddToWishListReqBody": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongoId"
            },
            "description": "An array of product IDs to add to the wishlist.",
            "example": [
              "60c72b2f9b1d8e001f8e8e8e",
              "60c72b2f9b1d8e001f8e8e8f"
            ]
          }
        },
        "required": [
          "productId"
        ]
      },
      "RemoveFromWishListReqBody": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongoId"
            },
            "description": "An array of product IDs to remove from the wishlist.",
            "example": [
              "60c72b2f9b1d8e001f8e8e8e"
            ]
          }
        },
        "required": [
          "productId"
        ]
      },
      "PaginatedProductResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "example": 10
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              },
              "totalPages": {
                "type": "integer",
                "example": 15
              },
              "totalRecords": {
                "type": "integer",
                "example": 147
              }
            }
          }
        }
      },
      "Product": {
        "type": "object",
        "description": "Represents a full product object with all details.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "name_on_list": {
            "type": "string"
          },
          "engName_on_list": {
            "type": "string"
          },
          "price_on_list": {
            "type": "string"
          },
          "image_on_list": {
            "type": "string",
            "format": "uri"
          },
          "hover_image_on_list": {
            "type": "string",
            "format": "uri"
          },
          "productName_detail": {
            "type": "string"
          },
          "engName_detail": {
            "type": "string"
          },
          "description_detail": {
            "type": "object",
            "properties": {
              "rawHtml": {
                "type": "string"
              },
              "plainText": {
                "type": "string"
              }
            }
          },
          "ingredients_detail": {
            "type": "object",
            "properties": {
              "rawHtml": {
                "type": "string"
              },
              "plainText": {
                "type": "string"
              }
            }
          },
          "guide_detail": {
            "type": "object",
            "properties": {
              "rawHtml": {
                "type": "string"
              },
              "plainText": {
                "type": "string"
              }
            }
          },
          "specification_detail": {
            "type": "object",
            "properties": {
              "rawHtml": {
                "type": "string"
              },
              "plainText": {
                "type": "string"
              }
            }
          },
          "main_images_detail": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "sub_images_detail": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "filter_brand": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_dac_tinh": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_ingredients": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_product_type": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_size": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_skin_type": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_uses": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_origin": {
            "type": "string",
            "format": "mongoId"
          },
          "quantity": {
            "type": "integer"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "OUT_OF_STOCK",
              "DISCONTINUED"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AddNewReviewReqBody": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "integer",
            "description": "Rating for the product, from 1 to 5.",
            "minimum": 1,
            "maximum": 5,
            "example": 5
          },
          "comment": {
            "type": "string",
            "description": "A text comment for the review.",
            "example": "Sản phẩm rất tuyệt vời!"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "An array of image URLs for the review.",
            "example": [
              "https://example.com/image1.jpg"
            ]
          },
          "videos": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "An array of video URLs for the review."
          }
        },
        "required": [
          "rating",
          "comment"
        ]
      },
      "UpdateReviewReqBody": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "integer",
            "description": "New rating for the product, from 1 to 5.",
            "minimum": 1,
            "maximum": 5,
            "example": 4
          },
          "comment": {
            "type": "string",
            "description": "New text comment for the review.",
            "example": "Sản phẩm dùng khá tốt."
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "An array of new image URLs for the review."
          },
          "videos": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "An array of new video URLs for the review."
          }
        }
      },
      "Review": {
        "type": "object",
        "description": "Represents a review object.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "userID": {
            "type": "string",
            "format": "mongoId"
          },
          "productID": {
            "type": "string",
            "format": "mongoId"
          },
          "orderID": {
            "type": "string",
            "format": "mongoId"
          },
          "rating": {
            "type": "integer",
            "example": 5
          },
          "comment": {
            "type": "string",
            "example": "Chất lượng sản phẩm tuyệt vời."
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "videos": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "ReviewSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "$ref": "#/components/schemas/Review"
          }
        }
      },
      "PaginatedReviewResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "example": 10
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              },
              "totalPages": {
                "type": "integer",
                "example": 3
              },
              "totalRecords": {
                "type": "integer",
                "example": 25
              }
            }
          }
        }
      },
      "ZaloPayOrderReqBody": {
        "type": "object",
        "properties": {
          "orderDetails": {
            "type": "array",
            "description": "List of items in the order.",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "mongoId"
                },
                "ProductID": {
                  "type": "string",
                  "format": "mongoId"
                },
                "Quantity": {
                  "type": "integer"
                },
                "Discount": {
                  "type": "number"
                }
              }
            }
          },
          "total": {
            "type": "number",
            "description": "The total amount of the order.",
            "example": 500000
          }
        },
        "required": [
          "orderDetails",
          "total"
        ]
      },
      "VNPayOrderReqBody": {
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "Total amount for the payment.",
            "example": 500000
          },
          "bankCode": {
            "type": "string",
            "description": "Optional bank code for specific bank gateway.",
            "example": "NCB"
          },
          "language": {
            "type": "string",
            "description": "Language for the payment gateway.",
            "enum": [
              "vn",
              "en"
            ],
            "default": "vn"
          },
          "orderDescription": {
            "type": "string",
            "description": "Description of the order.",
            "example": "Thanh toan don hang #12345"
          },
          "orderType": {
            "type": "string",
            "description": "Type of the order.",
            "default": "other",
            "example": "billpayment"
          }
        },
        "required": [
          "amount"
        ]
      },
      "PrepareOrderReqBody": {
        "type": "object",
        "properties": {
          "selectedProductIDs": {
            "type": "array",
            "description": "An array of product IDs selected from the cart for checkout.",
            "items": {
              "type": "string",
              "format": "mongoId"
            },
            "example": [
              "60d5ec49e0f6e9001f8d6b1a",
              "60d5ec49e0f6e9001f8d6b1b"
            ]
          }
        },
        "required": [
          "selectedProductIDs"
        ]
      },
      "BuyNowReqBody": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "string",
            "format": "mongoId",
            "description": "The ID of the product to buy now.",
            "example": "60d5ec49e0f6e9001f8d6b1a"
          },
          "quantity": {
            "type": "integer",
            "description": "The quantity of the product to buy.",
            "example": 1
          }
        },
        "required": [
          "productId",
          "quantity"
        ]
      },
      "CheckoutReqBody": {
        "type": "object",
        "properties": {
          "ShipAddress": {
            "type": "string",
            "description": "The shipping address for the order.",
            "example": "123 Le Loi, District 1, Ho Chi Minh City"
          },
          "Description": {
            "type": "string",
            "description": "Optional notes or description for the order.",
            "example": "Please call before delivery."
          },
          "RequireDate": {
            "type": "string",
            "format": "date-time",
            "description": "The required delivery date for the order."
          },
          "Discount": {
            "type": "string",
            "description": "Discount percentage (e.g., '10' for 10%).",
            "example": "10"
          },
          "PaymentMethod": {
            "type": "string",
            "enum": [
              "COD",
              "ZALOPAY",
              "VNPAY"
            ],
            "default": "COD"
          },
          "PaymentStatus": {
            "type": "string",
            "enum": [
              "UNPAID",
              "PAID"
            ],
            "default": "UNPAID"
          },
          "type": {
            "type": "string",
            "enum": [
              "cart",
              "buy-now"
            ],
            "description": "The type of checkout."
          }
        },
        "required": [
          "ShipAddress",
          "RequireDate"
        ]
      },
      "CancelOrderReqBody": {
        "type": "object",
        "properties": {
          "reason": {
            "type": "string",
            "description": "The reason for requesting order cancellation.",
            "example": "Changed my mind about the product."
          }
        },
        "required": [
          "reason"
        ]
      },
      "ApproveRejectCancelReqBody": {
        "type": "object",
        "properties": {
          "staffNote": {
            "type": "string",
            "description": "Optional note from the staff regarding the approval or rejection.",
            "example": "Approved as per customer request."
          }
        }
      },
      "Order": {
        "type": "object",
        "description": "Represents a full order object.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "UserID": {
            "type": "string",
            "format": "mongoId"
          },
          "ShipAddress": {
            "type": "string"
          },
          "Description": {
            "type": "string"
          },
          "RequireDate": {
            "type": "string",
            "format": "date-time"
          },
          "ShippedDate": {
            "type": "string",
            "format": "date-time"
          },
          "Status": {
            "type": "string",
            "enum": [
              "PENDING",
              "CONFIRMED",
              "PROCESSING",
              "SHIPPING",
              "DELIVERED",
              "CANCELLED",
              "RETURNED",
              "FAILED"
            ]
          },
          "PaymentMethod": {
            "type": "string",
            "enum": [
              "COD",
              "ZALOPAY",
              "VNPAY"
            ]
          },
          "PaymentStatus": {
            "type": "string",
            "enum": [
              "UNPAID",
              "PAID"
            ]
          },
          "CancelRequest": {
            "type": "object",
            "properties": {
              "status": {
                "type": "string",
                "enum": [
                  "REQUESTED",
                  "APPROVED",
                  "REJECTED"
                ]
              },
              "reason": {
                "type": "string"
              },
              "requestedAt": {
                "type": "string",
                "format": "date-time"
              },
              "staffId": {
                "type": "string",
                "format": "mongoId"
              },
              "staffNote": {
                "type": "string"
              }
            }
          },
          "RefundStatus": {
            "type": "string",
            "enum": [
              "NONE",
              "REQUESTED",
              "PROCESSING",
              "REFUNDED",
              "FAILED"
            ]
          },
          "Discount": {
            "type": "string"
          },
          "TotalPrice": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          },
          "modified_by": {
            "type": "string",
            "format": "mongoId"
          }
        }
      },
      "PreparedOrderResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Order prepared successfully, expires in 30 minutes"
          },
          "result": {
            "type": "object",
            "properties": {
              "UserID": {
                "type": "string",
                "format": "mongoId"
              },
              "Products": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ProductID": {
                      "type": "string",
                      "format": "mongoId"
                    },
                    "Quantity": {
                      "type": "integer"
                    },
                    "PricePerUnit": {
                      "type": "number"
                    },
                    "TotalPrice": {
                      "type": "number"
                    }
                  }
                }
              },
              "TotalPrice": {
                "type": "number"
              },
              "CreatedAt": {
                "type": "string",
                "format": "date-time"
              }
            }
          }
        }
      },
      "OrderWithDetailsResponse": {
        "type": "object",
        "properties": {
          "orderId": {
            "type": "string",
            "format": "mongoId"
          },
          "orderDetail": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "format": "mongoId"
                },
                "Quantity": {
                  "type": "string"
                },
                "OrderDate": {
                  "type": "string",
                  "format": "date-time"
                },
                "UnitPrice": {
                  "type": "string"
                },
                "Products": {
                  "type": "object",
                  "properties": {
                    "productId": {
                      "type": "string",
                      "format": "mongoId"
                    },
                    "name": {
                      "type": "string"
                    },
                    "image": {
                      "type": "string",
                      "format": "uri"
                    },
                    "price": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PaginatedOrderResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Order"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "example": 10
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              },
              "totalPages": {
                "type": "integer",
                "example": 5
              },
              "totalRecords": {
                "type": "integer",
                "example": 48
              }
            }
          }
        }
      },
      "UpdateOrderStatusResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Update to next status successfully"
          },
          "result": {
            "type": "object",
            "properties": {
              "orderId": {
                "type": "string",
                "format": "mongoId"
              },
              "previousStatus": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "CONFIRMED",
                  "PROCESSING",
                  "SHIPPING",
                  "DELIVERED",
                  "CANCELLED",
                  "RETURNED",
                  "FAILED"
                ]
              },
              "updatedStatus": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "CONFIRMED",
                  "PROCESSING",
                  "SHIPPING",
                  "DELIVERED",
                  "CANCELLED",
                  "RETURNED",
                  "FAILED"
                ]
              }
            }
          }
        }
      },
      "OrderCreationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Order created successfully"
          },
          "result": {
            "type": "object",
            "properties": {
              "UserID": {
                "type": "string",
                "format": "mongoId"
              },
              "ShipAddress": {
                "type": "string"
              },
              "Description": {
                "type": "string"
              },
              "RequireDate": {
                "type": "string",
                "format": "date-time"
              },
              "Discount": {
                "type": "string"
              },
              "TotalPrice": {
                "type": "string"
              },
              "PaymentMethod": {
                "type": "string",
                "enum": [
                  "COD",
                  "ZALOPAY",
                  "VNPAY"
                ]
              },
              "PaymentStatus": {
                "type": "string",
                "enum": [
                  "UNPAID",
                  "PAID"
                ]
              },
              "Status": {
                "type": "string",
                "enum": [
                  "PENDING",
                  "CONFIRMED",
                  "PROCESSING",
                  "SHIPPING",
                  "DELIVERED",
                  "CANCELLED",
                  "RETURNED",
                  "FAILED"
                ]
              },
              "orderDetails": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ProductID": {
                      "type": "string",
                      "format": "mongoId"
                    },
                    "OrderID": {
                      "type": "string",
                      "format": "mongoId"
                    },
                    "Quantity": {
                      "type": "string"
                    },
                    "OrderDate": {
                      "type": "string",
                      "format": "date-time"
                    },
                    "UnitPrice": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "AddToCartReqBody": {
        "type": "object",
        "properties": {
          "ProductID": {
            "type": "string",
            "format": "mongoId",
            "description": "The ID of the product to add to the cart.",
            "example": "60d5ec49e0f6e9001f8d6b1a"
          },
          "Quantity": {
            "type": "integer",
            "description": "The quantity of the product to add.",
            "example": 2,
            "minimum": 1
          }
        },
        "required": [
          "ProductID",
          "Quantity"
        ]
      },
      "UpdateCartReqBody": {
        "type": "object",
        "properties": {
          "Quantity": {
            "type": "integer",
            "description": "The new quantity for the product. Set to 0 to remove the item.",
            "example": 3,
            "minimum": 0
          }
        },
        "required": [
          "Quantity"
        ]
      },
      "CartResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Cart fetched successfully"
          },
          "result": {
            "type": "object",
            "properties": {
              "Products": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "ProductID": {
                      "type": "string",
                      "format": "mongoId"
                    },
                    "Quantity": {
                      "type": "integer"
                    },
                    "name": {
                      "type": "string",
                      "example": "Toner Pad"
                    },
                    "image": {
                      "type": "string",
                      "format": "uri",
                      "example": "https://example.com/image.jpg"
                    },
                    "unitPrice": {
                      "type": "number",
                      "example": 250000
                    },
                    "totalPrice": {
                      "type": "number",
                      "example": 500000
                    }
                  }
                }
              }
            }
          }
        }
      },
      "PaginatedUserResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "description": "Number of items per page",
                "example": 10
              },
              "currentPage": {
                "type": "integer",
                "minimum": 1,
                "description": "Current page number",
                "example": 1
              },
              "totalPages": {
                "type": "integer",
                "minimum": 0,
                "description": "Total number of pages",
                "example": 5
              },
              "totalRecords": {
                "type": "integer",
                "minimum": 0,
                "description": "Total number of records",
                "example": 50
              }
            },
            "required": [
              "limit",
              "currentPage",
              "totalPages",
              "totalRecords"
            ]
          }
        }
      },
      "CreateVoucherReqBody": {
        "type": "object",
        "required": [
          "code",
          "discountType",
          "discountValue",
          "maxDiscountAmount",
          "minOrderValue",
          "startDate",
          "endDate"
        ],
        "properties": {
          "code": {
            "type": "string",
            "description": "Unique voucher code (3-10 alphanumeric characters).",
            "example": "SUMMER25"
          },
          "description": {
            "type": "string",
            "description": "A short description.",
            "example": "Summer Sale 25%"
          },
          "discountType": {
            "type": "string",
            "enum": [
              "PERCENTAGE",
              "FIXED"
            ]
          },
          "discountValue": {
            "type": "number",
            "description": "Discount value. If percentage, must be >0 and <100. If fixed, must be >1000.",
            "example": 25
          },
          "maxDiscountAmount": {
            "type": "number",
            "description": "Maximum discount amount.",
            "example": 50000
          },
          "minOrderValue": {
            "type": "number",
            "description": "Minimum order value to apply the voucher.",
            "example": 200000
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "usageLimit": {
            "type": "integer",
            "description": "Total usage limit.",
            "example": 100
          },
          "userUsageLimit": {
            "type": "integer",
            "description": "Usage limit per user.",
            "example": 1
          }
        }
      },
      "UpdateVoucherReqBody": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "discountType": {
            "type": "string",
            "enum": [
              "PERCENTAGE",
              "FIXED"
            ]
          },
          "discountValue": {
            "type": "number"
          },
          "maxDiscountAmount": {
            "type": "number"
          },
          "minOrderValue": {
            "type": "number"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "usageLimit": {
            "type": "integer"
          },
          "userUsageLimit": {
            "type": "integer"
          }
        }
      },
      "VoucherCreationResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "type": "object",
            "properties": {
              "acknowledged": {
                "type": "boolean",
                "example": true
              },
              "insertedId": {
                "type": "string",
                "format": "mongoId"
              }
            }
          }
        }
      },
      "CreateProductReqBody": {
        "type": "object",
        "required": [
          "name_on_list",
          "engName_on_list",
          "price_on_list",
          "image_on_list",
          "hover_image_on_list",
          "productName_detail",
          "engName_detail",
          "description_detail",
          "ingredients_detail",
          "guide_detail",
          "specification_detail",
          "main_images_detail",
          "sub_images_detail",
          "quantity"
        ],
        "properties": {
          "name_on_list": {
            "type": "string"
          },
          "engName_on_list": {
            "type": "string"
          },
          "price_on_list": {
            "type": "string"
          },
          "image_on_list": {
            "type": "string",
            "format": "uri"
          },
          "hover_image_on_list": {
            "type": "string",
            "format": "uri"
          },
          "productName_detail": {
            "type": "string"
          },
          "engName_detail": {
            "type": "string"
          },
          "description_detail": {
            "$ref": "#/components/schemas/DetailSection"
          },
          "ingredients_detail": {
            "$ref": "#/components/schemas/DetailSection"
          },
          "guide_detail": {
            "$ref": "#/components/schemas/DetailSection"
          },
          "specification_detail": {
            "$ref": "#/components/schemas/DetailSection"
          },
          "main_images_detail": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "sub_images_detail": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "filter_brand": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_dac_tinh": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_ingredients": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_product_type": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_size": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_skin_type": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_uses": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_origin": {
            "type": "string",
            "format": "mongoId"
          },
          "quantity": {
            "type": "integer"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "OUT_OF_STOCK",
              "DISCONTINUED"
            ]
          }
        }
      },
      "UpdateProductReqBody": {
        "type": "object",
        "properties": {
          "name_on_list": {
            "type": "string"
          },
          "engName_on_list": {
            "type": "string"
          },
          "price_on_list": {
            "type": "string"
          }
        }
      },
      "CreateFilterBrandReqBody": {
        "type": "object",
        "required": [
          "option_name",
          "category_name",
          "category_param"
        ],
        "properties": {
          "option_name": {
            "type": "string",
            "example": "La Roche-Posay"
          },
          "category_name": {
            "type": "string",
            "example": "Thương hiệu"
          },
          "category_param": {
            "type": "string",
            "example": "la-roche-posay"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "COLLABORATION",
              "PARTNERSHIP",
              "EXCLUSIVE",
              "LIMITED_EDITION",
              "SUSPENDED",
              "DISCONTINUED"
            ],
            "default": "ACTIVE"
          }
        }
      },
      "DetailSection": {
        "type": "object",
        "properties": {
          "rawHtml": {
            "type": "string"
          },
          "plainText": {
            "type": "string"
          }
        }
      },
      "UpdateUserStateReqBody": {
        "type": "object",
        "required": [
          "verify"
        ],
        "properties": {
          "verify": {
            "type": "integer",
            "description": "The new verification status for the user. (0 - Unverified, 1 - Verified, 2 - Banned)",
            "enum": [
              0,
              1,
              2
            ],
            "example": 1
          }
        }
      },
      "UpdateProductStateReqBody": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "The new state for the product.",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "OUT_OF_STOCK",
              "DISCONTINUED"
            ],
            "example": "INACTIVE"
          }
        }
      },
      "FilterBrand": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId",
            "description": "The unique identifier for the filter brand."
          },
          "option_name": {
            "type": "string",
            "description": "The display name of the brand.",
            "example": "La Roche-Posay"
          },
          "category_name": {
            "type": "string",
            "description": "The category this filter belongs to.",
            "example": "Thương hiệu"
          },
          "category_param": {
            "type": "string",
            "description": "A URL-friendly version of the brand name.",
            "example": "la-roche-posay"
          },
          "state": {
            "type": "string",
            "description": "The current state of the brand.",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "COLLABORATION",
              "PARTNERSHIP",
              "EXCLUSIVE",
              "LIMITED_EDITION",
              "SUSPENDED",
              "DISCONTINUED"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "PaginatedFilterBrandResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterBrand"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginatedUserResponse/properties/pagination"
          }
        }
      },
      "UpdateFilterBrandReqBody": {
        "type": "object",
        "description": "Only include the fields that need to be updated.",
        "properties": {
          "option_name": {
            "type": "string",
            "example": "La Roche-Posay (Official)"
          },
          "category_name": {
            "type": "string",
            "example": "Thương Hiệu Nổi Bật"
          },
          "category_param": {
            "type": "string",
            "example": "la-roche-posay-official"
          }
        }
      },
      "DisableFilterBrandReqBody": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "The new state for the filter brand.",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "COLLABORATION",
              "PARTNERSHIP",
              "EXCLUSIVE",
              "LIMITED_EDITION",
              "SUSPENDED",
              "DISCONTINUED"
            ],
            "example": "INACTIVE"
          }
        }
      },
      "FilterDacTinh": {
        "type": "object",
        "description": "Đại diện cho một đối tượng filter Đặc tính",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId",
            "description": "ID duy nhất của filter đặc tính."
          },
          "option_name": {
            "type": "string",
            "description": "Tên hiển thị của đặc tính.",
            "example": "Chống Lão Hóa"
          },
          "category_name": {
            "type": "string",
            "description": "Danh mục mà filter này thuộc về.",
            "example": "Đặc Tính"
          },
          "category_param": {
            "type": "string",
            "description": "Tên URL-friendly của đặc tính.",
            "example": "chong-lao-hoa"
          },
          "state": {
            "type": "string",
            "description": "Trạng thái hiện tại của đặc tính.",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateFilterDacTinhReqBody": {
        "type": "object",
        "required": [
          "option_name",
          "category_name",
          "category_param"
        ],
        "properties": {
          "option_name": {
            "type": "string",
            "example": "Làm Sáng Da"
          },
          "category_name": {
            "type": "string",
            "example": "Đặc Tính"
          },
          "category_param": {
            "type": "string",
            "example": "lam-sang-da"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "default": "ACTIVE"
          }
        }
      },
      "UpdateFilterDacTinhReqBody": {
        "type": "object",
        "description": "Chỉ bao gồm các trường cần cập nhật.",
        "properties": {
          "option_name": {
            "type": "string",
            "example": "Làm Sáng Da & Mờ Thâm"
          },
          "category_name": {
            "type": "string",
            "example": "Đặc Tính Sản Phẩm"
          },
          "category_param": {
            "type": "string",
            "example": "lam-sang-da-mo-tham"
          }
        }
      },
      "DisableFilterDacTinhReqBody": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "Trạng thái mới cho filter đặc tính.",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "example": "INACTIVE"
          }
        }
      },
      "PaginatedFilterDacTinhResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterDacTinh"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginatedUserResponse/properties/pagination"
          }
        }
      },
      "FilterHskIngredient": {
        "type": "object",
        "description": "Đại diện cho một đối tượng filter Thành phần HSK",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "option_name": {
            "type": "string",
            "example": "Niacinamide"
          },
          "category_name": {
            "type": "string",
            "example": "Thành Phần HSK"
          },
          "category_param": {
            "type": "string",
            "example": "niacinamide"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateFilterHskIngredientReqBody": {
        "type": "object",
        "required": [
          "option_name",
          "category_name",
          "category_param"
        ],
        "properties": {
          "option_name": {
            "type": "string",
            "example": "BHA 2%"
          },
          "category_name": {
            "type": "string",
            "example": "Thành Phần HSK"
          },
          "category_param": {
            "type": "string",
            "example": "bha-2-phantram"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "default": "ACTIVE"
          }
        }
      },
      "UpdateFilterHskIngredientReqBody": {
        "type": "object",
        "description": "Chỉ bao gồm các trường cần cập nhật cho thành phần HSK.",
        "properties": {
          "option_name": {
            "type": "string",
            "example": "Niacinamide 10% + Zinc 1%"
          },
          "category_name": {
            "type": "string"
          },
          "category_param": {
            "type": "string"
          }
        }
      },
      "DisableFilterHskIngredientReqBody": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "Trạng thái mới cho filter thành phần.",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "example": "INACTIVE"
          }
        }
      },
      "PaginatedFilterHskIngredientResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterHskIngredient"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginatedUserResponse/properties/pagination"
          }
        }
      },
      "FilterHskProductType": {
        "type": "object",
        "description": "Đại diện cho một đối tượng filter Loại Sản Phẩm HSK.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "option_name": {
            "type": "string",
            "example": "Serum"
          },
          "description": {
            "type": "string",
            "example": "Tinh chất đặc trị các vấn đề về da"
          },
          "category_name": {
            "type": "string",
            "example": "Loại Sản Phẩm HSK"
          },
          "category_param": {
            "type": "string",
            "example": "serum"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateFilterHskProductTypeReqBody": {
        "type": "object",
        "required": [
          "option_name",
          "category_name",
          "category_param"
        ],
        "properties": {
          "option_name": {
            "type": "string",
            "example": "Kem Chống Nắng"
          },
          "description": {
            "type": "string",
            "example": "Sản phẩm bảo vệ da khỏi tia UV"
          },
          "category_name": {
            "type": "string",
            "example": "Loại Sản Phẩm HSK"
          },
          "category_param": {
            "type": "string",
            "example": "kem-chong-nang"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "default": "ACTIVE"
          }
        }
      },
      "UpdateFilterHskProductTypeReqBody": {
        "type": "object",
        "description": "Chỉ bao gồm các trường cần cập nhật cho loại sản phẩm.",
        "properties": {
          "option_name": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "category_name": {
            "type": "string"
          },
          "category_param": {
            "type": "string"
          }
        }
      },
      "DisableFilterHskProductTypeReqBody": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "Trạng thái mới cho filter loại sản phẩm.",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "example": "INACTIVE"
          }
        }
      },
      "PaginatedFilterHskProductTypeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterHskProductType"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginatedUserResponse/properties/pagination"
          }
        }
      },
      "FilterHskSize": {
        "type": "object",
        "description": "Đại diện cho một đối tượng filter Kích thước (Size).",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "option_name": {
            "type": "string",
            "example": "100ml"
          },
          "category_name": {
            "type": "string",
            "example": "Kích Thước HSK"
          },
          "category_param": {
            "type": "string",
            "example": "100ml"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateFilterHskSizeReqBody": {
        "type": "object",
        "required": [
          "option_name",
          "category_name",
          "category_param"
        ],
        "properties": {
          "option_name": {
            "type": "string",
            "example": "250ml"
          },
          "category_name": {
            "type": "string",
            "example": "Kích Thước HSK"
          },
          "category_param": {
            "type": "string",
            "example": "250ml"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "default": "ACTIVE"
          }
        }
      },
      "UpdateFilterHskSizeReqBody": {
        "type": "object",
        "description": "Chỉ bao gồm các trường cần cập nhật cho kích thước.",
        "properties": {
          "option_name": {
            "type": "string"
          },
          "category_name": {
            "type": "string"
          },
          "category_param": {
            "type": "string"
          }
        }
      },
      "DisableFilterHskSizeReqBody": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "Trạng thái mới cho filter kích thước.",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "example": "INACTIVE"
          }
        }
      },
      "PaginatedFilterHskSizeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterHskSize"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginatedUserResponse/properties/pagination"
          }
        }
      },
      "FilterHskSkinType": {
        "type": "object",
        "description": "Đại diện cho một đối tượng filter Loại Da HSK.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "option_name": {
            "type": "string",
            "example": "Da Dầu"
          },
          "category_name": {
            "type": "string",
            "example": "Loại Da HSK"
          },
          "category_param": {
            "type": "string",
            "example": "da-dau"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateFilterHskSkinTypeReqBody": {
        "type": "object",
        "required": [
          "option_name",
          "category_name",
          "category_param"
        ],
        "properties": {
          "option_name": {
            "type": "string",
            "example": "Da Hỗn Hợp"
          },
          "category_name": {
            "type": "string",
            "example": "Loại Da HSK"
          },
          "category_param": {
            "type": "string",
            "example": "da-hon-hop"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "default": "ACTIVE"
          }
        }
      },
      "UpdateFilterHskSkinTypeReqBody": {
        "type": "object",
        "description": "Chỉ bao gồm các trường cần cập nhật cho loại da.",
        "properties": {
          "option_name": {
            "type": "string"
          },
          "category_name": {
            "type": "string"
          },
          "category_param": {
            "type": "string"
          }
        }
      },
      "DisableFilterHskSkinTypeReqBody": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "Trạng thái mới cho filter loại da.",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "example": "INACTIVE"
          }
        }
      },
      "PaginatedFilterHskSkinTypeResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterHskSkinType"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginatedUserResponse/properties/pagination"
          }
        }
      },
      "FilterHskUses": {
        "type": "object",
        "description": "Đại diện cho một đối tượng filter Công Dụng (Uses).",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "option_name": {
            "type": "string",
            "example": "Phục Hồi Da"
          },
          "category_name": {
            "type": "string",
            "example": "Công Dụng HSK"
          },
          "category_param": {
            "type": "string",
            "example": "phuc-hoi-da"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateFilterHskUsesReqBody": {
        "type": "object",
        "required": [
          "option_name",
          "category_name",
          "category_param"
        ],
        "properties": {
          "option_name": {
            "type": "string",
            "example": "Trị Mụn"
          },
          "category_name": {
            "type": "string",
            "example": "Công Dụng HSK"
          },
          "category_param": {
            "type": "string",
            "example": "tri-mun"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "default": "ACTIVE"
          }
        }
      },
      "UpdateFilterHskUsesReqBody": {
        "type": "object",
        "description": "Chỉ bao gồm các trường cần cập nhật cho công dụng.",
        "properties": {
          "option_name": {
            "type": "string"
          },
          "category_name": {
            "type": "string"
          },
          "category_param": {
            "type": "string"
          }
        }
      },
      "DisableFilterHskUsesReqBody": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "Trạng thái mới cho filter công dụng.",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "example": "INACTIVE"
          }
        }
      },
      "PaginatedFilterHskUsesResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterHskUses"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginatedUserResponse/properties/pagination"
          }
        }
      },
      "FilterHskOrigin": {
        "type": "object",
        "description": "Đại diện cho một đối tượng filter Nguồn Gốc (Origin).",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "option_name": {
            "type": "string",
            "example": "Hàn Quốc"
          },
          "category_name": {
            "type": "string",
            "example": "Nguồn Gốc HSK"
          },
          "category_param": {
            "type": "string",
            "example": "han-quoc"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "CreateFilterHskOriginReqBody": {
        "type": "object",
        "required": [
          "option_name",
          "category_name",
          "category_param"
        ],
        "properties": {
          "option_name": {
            "type": "string",
            "example": "Nhật Bản"
          },
          "category_name": {
            "type": "string",
            "example": "Nguồn Gốc HSK"
          },
          "category_param": {
            "type": "string",
            "example": "nhat-ban"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "default": "ACTIVE"
          }
        }
      },
      "UpdateFilterHskOriginReqBody": {
        "type": "object",
        "description": "Chỉ bao gồm các trường cần cập nhật cho nguồn gốc.",
        "properties": {
          "option_name": {
            "type": "string"
          },
          "category_name": {
            "type": "string"
          },
          "category_param": {
            "type": "string"
          }
        }
      },
      "DisableFilterHskOriginReqBody": {
        "type": "object",
        "required": [
          "state"
        ],
        "properties": {
          "state": {
            "type": "string",
            "description": "Trạng thái mới cho filter nguồn gốc.",
            "enum": [
              "INACTIVE",
              "ACTIVE"
            ],
            "example": "INACTIVE"
          }
        }
      },
      "PaginatedFilterHskOriginResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterHskOrigin"
            }
          },
          "pagination": {
            "$ref": "#/components/schemas/PaginatedUserResponse/properties/pagination"
          }
        }
      },
      "ProductStatsResponse": {
        "type": "object",
        "properties": {
          "totalProducts": {
            "type": "integer",
            "description": "Tổng số sản phẩm trong hệ thống.",
            "example": 2299
          },
          "onSale": {
            "type": "integer",
            "description": "Số lượng sản phẩm đang được bán (trạng thái ACTIVE).",
            "example": 2299
          },
          "lowStock": {
            "type": "integer",
            "description": "Số lượng sản phẩm sắp hết hàng (số lượng > 0 và <= 10).",
            "example": 23
          },
          "outOfStock": {
            "type": "integer",
            "description": "Số lượng sản phẩm đã hết hàng (số lượng = 0).",
            "example": 68
          }
        }
      },
      "AuthSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Login successful"
          },
          "result": {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5..."
              },
              "refresh_token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5..."
              }
            }
          }
        }
      },
      "LoginSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Login successful"
          },
          "result": {
            "$ref": "#/components/schemas/AuthSuccessResponse"
          }
        }
      },
      "GetMeSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Get my profile successfully"
          },
          "result": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "RefreshTokenSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Refresh token successful"
          },
          "result": {
            "$ref": "#/components/schemas/AuthSuccessResponse"
          }
        }
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Operation was successful."
          }
        }
      },
      "WishListResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Wishlist fetched successfully"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongoId"
            },
            "description": "An array of product IDs in the user's wishlist.",
            "example": [
              "60c72b2f9b1d8e001f8e8e8e",
              "60c72b2f9b1d8e001f8e8e8f"
            ]
          }
        }
      },
      "PaginatedVoucherResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "example": 10
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              },
              "totalPages": {
                "type": "integer",
                "example": 5
              },
              "totalRecords": {
                "type": "integer",
                "example": 48
              }
            }
          }
        }
      },
      "ErrorValidationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Validation error"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "example": "Email is required"
                }
              }
            }
          }
        }
      },
      "ErrorStatusResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User not found"
          }
        }
      },
      "ErrorServerResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Internal Server Error"
          },
          "errorInfor": {
            "type": "object",
            "nullable": true,
            "description": "Additional error information (excluding stack trace)."
          }
        }
      },
      "User": {
        "type": "object",
        "description": "Represents a user object.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId",
            "example": "60c72b2f9b1d8e001f8e8e8e"
          },
          "first_name": {
            "type": "string",
            "example": "Van A"
          },
          "last_name": {
            "type": "string",
            "example": "Nguyen"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "username": {
            "type": "string",
            "example": "user12345"
          },
          "location": {
            "type": "string",
            "example": "Hanoi, Vietnam"
          },
          "phone_number": {
            "type": "string",
            "example": "0987654321"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/avatar.png"
          },
          "verify": {
            "type": "integer",
            "description": "Verification status of the user.",
            "enum": [
              0,
              1,
              2
            ],
            "example": 1
          },
          "roleid": {
            "type": "integer",
            "description": "Role of the user.",
            "enum": [
              0,
              1,
              2
            ],
            "example": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Voucher": {
        "type": "object",
        "description": "Represents a voucher object.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "code": {
            "type": "string",
            "example": "SUMMER25"
          },
          "description": {
            "type": "string",
            "example": "Summer sale discount"
          },
          "discountType": {
            "type": "string",
            "enum": [
              "PERCENTAGE",
              "FIXED"
            ],
            "example": "PERCENTAGE"
          },
          "discountValue": {
            "type": "number",
            "example": 15
          },
          "maxDiscountAmount": {
            "type": "number",
            "example": 50000
          },
          "minOrderValue": {
            "type": "number",
            "example": 200000
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "usageLimit": {
            "type": "integer"
          },
          "usedCount": {
            "type": "integer"
          },
          "userUsageLimit": {
            "type": "integer"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT access token in the format: Bearer <token>"
      }
    },
    "parameters": {
      "PageQuery": {
        "name": "page",
        "in": "query",
        "description": "The page number for pagination.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 1,
          "minimum": 1
        }
      },
      "LimitQuery": {
        "name": "limit",
        "in": "query",
        "description": "The number of items to return per page.",
        "required": false,
        "schema": {
          "type": "integer",
          "default": 10,
          "minimum": 1
        }
      }
    }
  }
}

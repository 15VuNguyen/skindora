{
  "openapi": "3.0.3",
  "info": {
    "title": "Skindora API",
    "version": "1.0.0",
    "description": "API for the Skindora application, handling user authentication, management, and other core features.",
    "contact": {
      "name": "Skindora Team",
      "email": "skindora.site@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "http://localhost:4000",
      "description": "Development Server"
    }
  ],
  "tags": [
    {
      "name": "Users",
      "description": "Operations related to user authentication, profile, and management."
    },
    {
      "name": "Staffs",
      "description": "Operations available only to staff and admin roles."
    },
    {
      "name": "Reviews",
      "description": "Operations for creating and managing product reviews."
    },
    {
      "name": "Products",
      "description": "Operations for viewing and managing products."
    }
  ],
  "paths": {
    "/users/register": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Register a new user",
        "description": "Creates a new user account, sends a verification email, and returns access/refresh tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterReqBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Registration successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginSuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., email exists, password mismatch).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/login": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Log in a user",
        "description": "Authenticates a user with email and password, returning access and refresh tokens.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginSuccessResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., incorrect email/password).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/logout": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Logout a user",
        "description": "Invalidates the provided refresh token, effectively logging the user out. Requires a valid access token for authentication.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LogoutReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Logout successful.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token or refresh token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (missing refresh_token in body).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/forgot-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Request a password reset",
        "description": "Sends a forgot password token to the user's email if the email exists.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ForgotPasswordReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Request acknowledged.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "404": {
            "description": "User with the provided email not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., invalid email format).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/verify-forgot-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verify forgot password token",
        "description": "Checks if the provided forgot password token is valid.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyForgotPasswordTokenReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token is valid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (token is invalid or incorrect).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/reset-password": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Reset user password",
        "description": "Sets a new password for the user using a valid forgot password token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password has been reset successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (forgot password token is invalid).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., passwords don't match).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/verify-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Verify user email",
        "description": "Verifies a user's email with the provided token. Returns new tokens upon successful first-time verification.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VerifyEmailReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Email verification status. Can be a success message or a new set of tokens.",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/LoginSuccessResponse"
                    },
                    {
                      "$ref": "#/components/schemas/MessageResponse"
                    }
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (email verify token is incorrect).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/resend-verify-email": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Resend email verification token",
        "description": "Resends a new email verification token to the authenticated user's email.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Resend email verification status.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (user is banned or already verified).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/change-password": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Change user password",
        "description": "Allows an authenticated and verified user to change their password by providing the old and new password.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token or old password does not match).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (user is not verified).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., new passwords don't match).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/me": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user's profile",
        "description": "Retrieves the profile information of the currently authenticated user.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved user profile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMeSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      },
      "patch": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user's profile",
        "description": "Partially updates the profile information of the authenticated user. Only include the fields to be changed.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateMeReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Profile updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetMeSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (invalid access token).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation error (e.g., username already exists).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/refresh-token": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Refresh access token",
        "description": "Issues a new access token and refresh token in exchange for a valid refresh token.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Tokens refreshed successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefreshTokenSuccessResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (refresh token is invalid, used, or non-existent).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity (missing refresh_token in body).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorValidationResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/oauth/google": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Google OAuth Callback",
        "description": "Callback endpoint for the Google OAuth 2.0 flow. This should not be called directly. The user is redirected here by Google after authentication. The service then redirects the user to the client application with tokens in the URL.\n",
        "parameters": [
          {
            "name": "code",
            "in": "query",
            "description": "The authorization code provided by Google.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "302": {
            "description": "Redirect to the client application with tokens in the query parameters.",
            "headers": {
              "Location": {
                "description": "The URL to redirect the user's browser to.",
                "schema": {
                  "type": "string",
                  "format": "uri"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., Google account's email is not verified).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/addToWishList": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "Add products to wishlist",
        "description": "Adds one or more products to the authenticated user's wishlist.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddToWishListReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products added to wishlist successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request (e.g., empty product list).",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "User or Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/removeFromWishList": {
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Remove products from wishlist",
        "description": "Removes one or more products from the authenticated user's wishlist.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RemoveFromWishListReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Products removed from wishlist successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Product not found in wishlist.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/getWishList": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get user's wishlist",
        "description": "Retrieves the list of product IDs in the authenticated user's wishlist.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Wishlist fetched successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WishListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/users/vouchers": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get all active vouchers",
        "description": "Retrieves a paginated list of all active vouchers available for users.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of items per page.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "code",
            "in": "query",
            "description": "Filter vouchers by a search term in their code.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of active vouchers.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedVoucherResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/staffs/manage-products/get-all": {
      "get": {
        "tags": [
          "Staffs"
        ],
        "summary": "(Staff) Get all products with pagination",
        "description": "Allows authenticated staff members to retrieve a paginated list of all products in the system. This provides a comprehensive view of products for management purposes.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of products to return per page.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized. Access token is missing or invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden. The user is not a staff or admin.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/review/{orderId}/products/{productId}/review": {
      "post": {
        "tags": [
          "Reviews"
        ],
        "summary": "Add a new review for a product",
        "description": "Allows an authenticated user to add a review (rating and comment) for a specific product they have purchased in a delivered order.\n",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the delivered order.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the product within the order to be reviewed.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AddNewReviewReqBody"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Review added successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "description": "Forbidden. Order has not been delivered or has already been reviewed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Order or Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      },
      "put": {
        "tags": [
          "Reviews"
        ],
        "summary": "Update an existing review",
        "description": "Allows an authenticated user to update their existing review for a product.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order containing the product review.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the product being reviewed.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateReviewReqBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Review updated successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewSuccessResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Review, Order, or Product not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/schemas/ErrorValidationResponse"
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      },
      "delete": {
        "tags": [
          "Reviews"
        ],
        "summary": "Delete a review",
        "description": "Allows an authenticated user to delete their review for a product.",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "required": true,
            "description": "The ID of the order containing the product review.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          },
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the product being reviewed.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Review deleted successfully.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MessageResponse"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "403": {
            "$ref": "#/components/schemas/ErrorStatusResponse"
          },
          "404": {
            "description": "Review not found.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorStatusResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/review/{productId}/review": {
      "get": {
        "tags": [
          "Reviews"
        ],
        "summary": "Get reviews for a product",
        "description": "Retrieves a paginated list of all reviews for a specific product. This is a public endpoint.",
        "parameters": [
          {
            "name": "productId",
            "in": "path",
            "required": true,
            "description": "The ID of the product to get reviews for.",
            "schema": {
              "type": "string",
              "format": "mongoId"
            }
          },
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve.",
            "schema": {
              "type": "integer",
              "default": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of reviews per page.",
            "schema": {
              "type": "integer",
              "default": 10
            }
          },
          {
            "name": "rating",
            "in": "query",
            "description": "Filter reviews by a specific rating (1-5).",
            "schema": {
              "type": "integer",
              "enum": [
                1,
                2,
                3,
                4,
                5
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of reviews.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedReviewResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    },
    "/products/get-all": {
      "get": {
        "tags": [
          "Products"
        ],
        "summary": "(Public) Get all products with pagination",
        "description": "Retrieves a paginated list of all products for public viewing. This endpoint returns a simplified version of the product object, suitable for list displays.\n",
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "description": "The page number to retrieve.",
            "schema": {
              "type": "integer",
              "default": 1,
              "minimum": 1
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "The number of products to return per page.",
            "schema": {
              "type": "integer",
              "default": 10,
              "minimum": 1
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A paginated list of products.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaginatedProductResponse"
                }
              }
            }
          },
          "500": {
            "$ref": "#/components/schemas/ErrorServerResponse"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "RegisterReqBody": {
        "type": "object",
        "required": [
          "first_name",
          "last_name",
          "email",
          "password",
          "confirm_password"
        ],
        "properties": {
          "first_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "minLength": 1,
            "maxLength": 30,
            "example": "Doe"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "Str0ngP@sswOrd"
          },
          "confirm_password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "Str0ngP@sswOrd"
          }
        }
      },
      "LoginReqBody": {
        "type": "object",
        "required": [
          "email",
          "password"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "Str0ngP@sswOrd"
          }
        }
      },
      "LogoutReqBody": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "The refresh token issued to the user during login, which will be invalidated upon logout.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjZhMTIzNDU2Nzg5MGFiY2RlZjEyMzQ1IiwidG9rZW5fdHlwZSI6InJlZnJlc2hfdG9rZW4iLCJpYXQiOjE3MTg1MjAxMDAsImV4cCI6MTcxOTEyNDkwMH0.abcdefg123456"
          }
        },
        "required": [
          "refresh_token"
        ]
      },
      "ForgotPasswordReqBody": {
        "type": "object",
        "required": [
          "email"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@example.com"
          }
        }
      },
      "VerifyForgotPasswordTokenReqBody": {
        "type": "object",
        "required": [
          "forgot_password_token"
        ],
        "properties": {
          "forgot_password_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "ResetPasswordReqBody": {
        "type": "object",
        "description": "Requires forgot_password_token alongside new password details.",
        "required": [
          "forgot_password_token",
          "password",
          "confirm_password"
        ],
        "properties": {
          "forgot_password_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          },
          "password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "NewStr0ngP@sswOrd"
          },
          "confirm_password": {
            "type": "string",
            "format": "password",
            "minLength": 8,
            "maxLength": 30,
            "example": "NewStr0ngP@sswOrd"
          }
        }
      },
      "VerifyEmailReqBody": {
        "type": "object",
        "required": [
          "email_verify_token"
        ],
        "properties": {
          "email_verify_token": {
            "type": "string",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        }
      },
      "ChangePasswordReqBody": {
        "type": "object",
        "required": [
          "old_password",
          "password",
          "confirm_password"
        ],
        "properties": {
          "old_password": {
            "type": "string",
            "description": "The user's current password.",
            "example": "oldPassword123"
          },
          "password": {
            "type": "string",
            "description": "The user's new password (must be strong).",
            "example": "newStrongPassword123!"
          },
          "confirm_password": {
            "type": "string",
            "description": "Confirmation of the new password.",
            "example": "newStrongPassword123!"
          }
        }
      },
      "UpdateMeReqBody": {
        "type": "object",
        "description": "Fields to update for the user's profile. All fields are optional.",
        "properties": {
          "first_name": {
            "type": "string",
            "description": "The user's first name.",
            "example": "Van A"
          },
          "last_name": {
            "type": "string",
            "description": "The user's last name.",
            "example": "Nguyen"
          },
          "location": {
            "type": "string",
            "description": "The user's location.",
            "example": "Ho Chi Minh, Vietnam"
          },
          "username": {
            "type": "string",
            "description": "A new unique username for the user. Must not be already taken by another user.",
            "example": "nguyenvana_2025"
          },
          "avatar": {
            "type": "string",
            "description": "A URL pointing to the user's new avatar image.",
            "format": "uri",
            "example": "https://example.com/avatars/new_avatar.png"
          }
        }
      },
      "RefreshTokenReqBody": {
        "type": "object",
        "properties": {
          "refresh_token": {
            "type": "string",
            "description": "The valid refresh token that was provided upon login.",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjY2NTZkYmRjYj..."
          }
        },
        "required": [
          "refresh_token"
        ]
      },
      "AddToWishListReqBody": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongoId"
            },
            "description": "An array of product IDs to add to the wishlist.",
            "example": [
              "60c72b2f9b1d8e001f8e8e8e",
              "60c72b2f9b1d8e001f8e8e8f"
            ]
          }
        },
        "required": [
          "productId"
        ]
      },
      "RemoveFromWishListReqBody": {
        "type": "object",
        "properties": {
          "productId": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongoId"
            },
            "description": "An array of product IDs to remove from the wishlist.",
            "example": [
              "60c72b2f9b1d8e001f8e8e8e"
            ]
          }
        },
        "required": [
          "productId"
        ]
      },
      "PaginatedProductResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "example": 10
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              },
              "totalPages": {
                "type": "integer",
                "example": 15
              },
              "totalRecords": {
                "type": "integer",
                "example": 147
              }
            }
          }
        }
      },
      "Product": {
        "type": "object",
        "description": "Represents a full product object with all details.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "name_on_list": {
            "type": "string"
          },
          "engName_on_list": {
            "type": "string"
          },
          "price_on_list": {
            "type": "string"
          },
          "image_on_list": {
            "type": "string",
            "format": "uri"
          },
          "hover_image_on_list": {
            "type": "string",
            "format": "uri"
          },
          "productName_detail": {
            "type": "string"
          },
          "engName_detail": {
            "type": "string"
          },
          "description_detail": {
            "type": "object",
            "properties": {
              "rawHtml": {
                "type": "string"
              },
              "plainText": {
                "type": "string"
              }
            }
          },
          "ingredients_detail": {
            "type": "object",
            "properties": {
              "rawHtml": {
                "type": "string"
              },
              "plainText": {
                "type": "string"
              }
            }
          },
          "guide_detail": {
            "type": "object",
            "properties": {
              "rawHtml": {
                "type": "string"
              },
              "plainText": {
                "type": "string"
              }
            }
          },
          "specification_detail": {
            "type": "object",
            "properties": {
              "rawHtml": {
                "type": "string"
              },
              "plainText": {
                "type": "string"
              }
            }
          },
          "main_images_detail": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "sub_images_detail": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "filter_brand": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_dac_tinh": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_ingredients": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_product_type": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_size": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_skin_type": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_hsk_uses": {
            "type": "string",
            "format": "mongoId"
          },
          "filter_origin": {
            "type": "string",
            "format": "mongoId"
          },
          "quantity": {
            "type": "integer"
          },
          "state": {
            "type": "string",
            "enum": [
              "INACTIVE",
              "ACTIVE",
              "OUT_OF_STOCK",
              "DISCONTINUED"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AddNewReviewReqBody": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "integer",
            "description": "Rating for the product, from 1 to 5.",
            "minimum": 1,
            "maximum": 5,
            "example": 5
          },
          "comment": {
            "type": "string",
            "description": "A text comment for the review.",
            "example": "Sản phẩm rất tuyệt vời!"
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "An array of image URLs for the review.",
            "example": [
              "https://example.com/image1.jpg"
            ]
          },
          "videos": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "An array of video URLs for the review."
          }
        },
        "required": [
          "rating",
          "comment"
        ]
      },
      "UpdateReviewReqBody": {
        "type": "object",
        "properties": {
          "rating": {
            "type": "integer",
            "description": "New rating for the product, from 1 to 5.",
            "minimum": 1,
            "maximum": 5,
            "example": 4
          },
          "comment": {
            "type": "string",
            "description": "New text comment for the review.",
            "example": "Sản phẩm dùng khá tốt."
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "An array of new image URLs for the review."
          },
          "videos": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            },
            "description": "An array of new video URLs for the review."
          }
        }
      },
      "Review": {
        "type": "object",
        "description": "Represents a review object.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "userID": {
            "type": "string",
            "format": "mongoId"
          },
          "productID": {
            "type": "string",
            "format": "mongoId"
          },
          "orderID": {
            "type": "string",
            "format": "mongoId"
          },
          "rating": {
            "type": "integer",
            "example": 5
          },
          "comment": {
            "type": "string",
            "example": "Chất lượng sản phẩm tuyệt vời."
          },
          "images": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "videos": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "uri"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "modifiedAt": {
            "type": "string",
            "format": "date-time"
          },
          "isDeleted": {
            "type": "boolean",
            "example": false
          }
        }
      },
      "ReviewSuccessResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "integer",
            "example": 200
          },
          "data": {
            "$ref": "#/components/schemas/Review"
          }
        }
      },
      "PaginatedReviewResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Review"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "example": 10
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              },
              "totalPages": {
                "type": "integer",
                "example": 3
              },
              "totalRecords": {
                "type": "integer",
                "example": 25
              }
            }
          }
        }
      },
      "AuthSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Login successful"
          },
          "result": {
            "type": "object",
            "properties": {
              "access_token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5..."
              },
              "refresh_token": {
                "type": "string",
                "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoiNjA5..."
              }
            }
          }
        }
      },
      "LoginSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Login successful"
          },
          "result": {
            "$ref": "#/components/schemas/AuthSuccessResponse"
          }
        }
      },
      "GetMeSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Get my profile successfully"
          },
          "result": {
            "$ref": "#/components/schemas/User"
          }
        }
      },
      "RefreshTokenSuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Refresh token successful"
          },
          "result": {
            "$ref": "#/components/schemas/AuthSuccessResponse"
          }
        }
      },
      "MessageResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Operation was successful."
          }
        }
      },
      "WishListResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Wishlist fetched successfully"
          },
          "data": {
            "type": "array",
            "items": {
              "type": "string",
              "format": "mongoId"
            },
            "description": "An array of product IDs in the user's wishlist.",
            "example": [
              "60c72b2f9b1d8e001f8e8e8e",
              "60c72b2f9b1d8e001f8e8e8f"
            ]
          }
        }
      },
      "PaginatedVoucherResponse": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Voucher"
            }
          },
          "pagination": {
            "type": "object",
            "properties": {
              "limit": {
                "type": "integer",
                "example": 10
              },
              "currentPage": {
                "type": "integer",
                "example": 1
              },
              "totalPages": {
                "type": "integer",
                "example": 5
              },
              "totalRecords": {
                "type": "integer",
                "example": 48
              }
            }
          }
        }
      },
      "ErrorValidationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Validation error"
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "properties": {
                "msg": {
                  "type": "string",
                  "example": "Email is required"
                }
              }
            }
          }
        }
      },
      "ErrorStatusResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "User not found"
          }
        }
      },
      "ErrorServerResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Internal Server Error"
          },
          "errorInfor": {
            "type": "object",
            "nullable": true,
            "description": "Additional error information (excluding stack trace)."
          }
        }
      },
      "User": {
        "type": "object",
        "description": "Represents a user object.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId",
            "example": "60c72b2f9b1d8e001f8e8e8e"
          },
          "first_name": {
            "type": "string",
            "example": "Van A"
          },
          "last_name": {
            "type": "string",
            "example": "Nguyen"
          },
          "email": {
            "type": "string",
            "format": "email",
            "example": "user@example.com"
          },
          "username": {
            "type": "string",
            "example": "user12345"
          },
          "location": {
            "type": "string",
            "example": "Hanoi, Vietnam"
          },
          "phone_number": {
            "type": "string",
            "example": "0987654321"
          },
          "avatar": {
            "type": "string",
            "format": "uri",
            "example": "https://example.com/avatar.png"
          },
          "verify": {
            "type": "integer",
            "description": "Verification status of the user.",
            "enum": [
              0,
              1,
              2
            ],
            "example": 1
          },
          "roleid": {
            "type": "integer",
            "description": "Role of the user.",
            "enum": [
              0,
              1,
              2
            ],
            "example": 0
          },
          "created_at": {
            "type": "string",
            "format": "date-time"
          },
          "updated_at": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "Voucher": {
        "type": "object",
        "description": "Represents a voucher object.",
        "properties": {
          "_id": {
            "type": "string",
            "format": "mongoId"
          },
          "code": {
            "type": "string",
            "example": "SUMMER25"
          },
          "description": {
            "type": "string",
            "example": "Summer sale discount"
          },
          "discountType": {
            "type": "string",
            "enum": [
              "PERCENTAGE",
              "FIXED"
            ],
            "example": "PERCENTAGE"
          },
          "discountValue": {
            "type": "number",
            "example": 15
          },
          "maxDiscountAmount": {
            "type": "number",
            "example": 50000
          },
          "minOrderValue": {
            "type": "number",
            "example": 200000
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "usageLimit": {
            "type": "integer"
          },
          "usedCount": {
            "type": "integer"
          },
          "userUsageLimit": {
            "type": "integer"
          },
          "isActive": {
            "type": "boolean",
            "example": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        }
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "description": "Enter JWT access token in the format: Bearer <token>"
      }
    }
  }
}
